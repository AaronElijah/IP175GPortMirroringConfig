
IP175G_PORTMIRRORING_CONFIG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002db4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002e74  08002e74  00012e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ee0  08002ee0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002ee0  08002ee0  00012ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ee8  08002ee8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ee8  08002ee8  00012ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002eec  08002eec  00012eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ef0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  2000000c  08002efc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08002efc  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006df6  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001694  00000000  00000000  00026e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000738  00000000  00000000  000284c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000670  00000000  00000000  00028bf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000fb65  00000000  00000000  00029268  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006a91  00000000  00000000  00038dcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005f677  00000000  00000000  0003f85e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009eed5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001874  00000000  00000000  0009ef50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002e5c 	.word	0x08002e5c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002e5c 	.word	0x08002e5c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	464f      	mov	r7, r9
 8000264:	4646      	mov	r6, r8
 8000266:	46d6      	mov	lr, sl
 8000268:	b5c0      	push	{r6, r7, lr}
 800026a:	0004      	movs	r4, r0
 800026c:	b082      	sub	sp, #8
 800026e:	000d      	movs	r5, r1
 8000270:	4691      	mov	r9, r2
 8000272:	4698      	mov	r8, r3
 8000274:	428b      	cmp	r3, r1
 8000276:	d82f      	bhi.n	80002d8 <__udivmoddi4+0x78>
 8000278:	d02c      	beq.n	80002d4 <__udivmoddi4+0x74>
 800027a:	4641      	mov	r1, r8
 800027c:	4648      	mov	r0, r9
 800027e:	f000 f8b1 	bl	80003e4 <__clzdi2>
 8000282:	0029      	movs	r1, r5
 8000284:	0006      	movs	r6, r0
 8000286:	0020      	movs	r0, r4
 8000288:	f000 f8ac 	bl	80003e4 <__clzdi2>
 800028c:	1a33      	subs	r3, r6, r0
 800028e:	469c      	mov	ip, r3
 8000290:	3b20      	subs	r3, #32
 8000292:	469a      	mov	sl, r3
 8000294:	d500      	bpl.n	8000298 <__udivmoddi4+0x38>
 8000296:	e076      	b.n	8000386 <__udivmoddi4+0x126>
 8000298:	464b      	mov	r3, r9
 800029a:	4652      	mov	r2, sl
 800029c:	4093      	lsls	r3, r2
 800029e:	001f      	movs	r7, r3
 80002a0:	464b      	mov	r3, r9
 80002a2:	4662      	mov	r2, ip
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d828      	bhi.n	80002fe <__udivmoddi4+0x9e>
 80002ac:	d025      	beq.n	80002fa <__udivmoddi4+0x9a>
 80002ae:	4653      	mov	r3, sl
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5a>
 80002b8:	e07b      	b.n	80003b2 <__udivmoddi4+0x152>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	4652      	mov	r2, sl
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4662      	mov	r2, ip
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e018      	b.n	8000306 <__udivmoddi4+0xa6>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9d0      	bls.n	800027a <__udivmoddi4+0x1a>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8a>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b002      	add	sp, #8
 80002f0:	bc1c      	pop	{r2, r3, r4}
 80002f2:	4690      	mov	r8, r2
 80002f4:	4699      	mov	r9, r3
 80002f6:	46a2      	mov	sl, r4
 80002f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d9d7      	bls.n	80002ae <__udivmoddi4+0x4e>
 80002fe:	2200      	movs	r2, #0
 8000300:	2300      	movs	r3, #0
 8000302:	9200      	str	r2, [sp, #0]
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	4663      	mov	r3, ip
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0e9      	beq.n	80002e0 <__udivmoddi4+0x80>
 800030c:	07fb      	lsls	r3, r7, #31
 800030e:	4698      	mov	r8, r3
 8000310:	4641      	mov	r1, r8
 8000312:	0872      	lsrs	r2, r6, #1
 8000314:	430a      	orrs	r2, r1
 8000316:	087b      	lsrs	r3, r7, #1
 8000318:	4666      	mov	r6, ip
 800031a:	e00e      	b.n	800033a <__udivmoddi4+0xda>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d101      	bne.n	8000324 <__udivmoddi4+0xc4>
 8000320:	42a2      	cmp	r2, r4
 8000322:	d80c      	bhi.n	800033e <__udivmoddi4+0xde>
 8000324:	1aa4      	subs	r4, r4, r2
 8000326:	419d      	sbcs	r5, r3
 8000328:	2001      	movs	r0, #1
 800032a:	1924      	adds	r4, r4, r4
 800032c:	416d      	adcs	r5, r5
 800032e:	2100      	movs	r1, #0
 8000330:	3e01      	subs	r6, #1
 8000332:	1824      	adds	r4, r4, r0
 8000334:	414d      	adcs	r5, r1
 8000336:	2e00      	cmp	r6, #0
 8000338:	d006      	beq.n	8000348 <__udivmoddi4+0xe8>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d9ee      	bls.n	800031c <__udivmoddi4+0xbc>
 800033e:	3e01      	subs	r6, #1
 8000340:	1924      	adds	r4, r4, r4
 8000342:	416d      	adcs	r5, r5
 8000344:	2e00      	cmp	r6, #0
 8000346:	d1f8      	bne.n	800033a <__udivmoddi4+0xda>
 8000348:	9800      	ldr	r0, [sp, #0]
 800034a:	9901      	ldr	r1, [sp, #4]
 800034c:	4653      	mov	r3, sl
 800034e:	1900      	adds	r0, r0, r4
 8000350:	4169      	adcs	r1, r5
 8000352:	2b00      	cmp	r3, #0
 8000354:	db23      	blt.n	800039e <__udivmoddi4+0x13e>
 8000356:	002b      	movs	r3, r5
 8000358:	4652      	mov	r2, sl
 800035a:	40d3      	lsrs	r3, r2
 800035c:	002a      	movs	r2, r5
 800035e:	4664      	mov	r4, ip
 8000360:	40e2      	lsrs	r2, r4
 8000362:	001c      	movs	r4, r3
 8000364:	4653      	mov	r3, sl
 8000366:	0015      	movs	r5, r2
 8000368:	2b00      	cmp	r3, #0
 800036a:	db2d      	blt.n	80003c8 <__udivmoddi4+0x168>
 800036c:	0026      	movs	r6, r4
 800036e:	4657      	mov	r7, sl
 8000370:	40be      	lsls	r6, r7
 8000372:	0033      	movs	r3, r6
 8000374:	0026      	movs	r6, r4
 8000376:	4667      	mov	r7, ip
 8000378:	40be      	lsls	r6, r7
 800037a:	0032      	movs	r2, r6
 800037c:	1a80      	subs	r0, r0, r2
 800037e:	4199      	sbcs	r1, r3
 8000380:	9000      	str	r0, [sp, #0]
 8000382:	9101      	str	r1, [sp, #4]
 8000384:	e7ac      	b.n	80002e0 <__udivmoddi4+0x80>
 8000386:	4662      	mov	r2, ip
 8000388:	2320      	movs	r3, #32
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	464a      	mov	r2, r9
 800038e:	40da      	lsrs	r2, r3
 8000390:	4661      	mov	r1, ip
 8000392:	0013      	movs	r3, r2
 8000394:	4642      	mov	r2, r8
 8000396:	408a      	lsls	r2, r1
 8000398:	0017      	movs	r7, r2
 800039a:	431f      	orrs	r7, r3
 800039c:	e780      	b.n	80002a0 <__udivmoddi4+0x40>
 800039e:	4662      	mov	r2, ip
 80003a0:	2320      	movs	r3, #32
 80003a2:	1a9b      	subs	r3, r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	4666      	mov	r6, ip
 80003a8:	409a      	lsls	r2, r3
 80003aa:	0023      	movs	r3, r4
 80003ac:	40f3      	lsrs	r3, r6
 80003ae:	4313      	orrs	r3, r2
 80003b0:	e7d4      	b.n	800035c <__udivmoddi4+0xfc>
 80003b2:	4662      	mov	r2, ip
 80003b4:	2320      	movs	r3, #32
 80003b6:	2100      	movs	r1, #0
 80003b8:	1a9b      	subs	r3, r3, r2
 80003ba:	2200      	movs	r2, #0
 80003bc:	9100      	str	r1, [sp, #0]
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	2201      	movs	r2, #1
 80003c2:	40da      	lsrs	r2, r3
 80003c4:	9201      	str	r2, [sp, #4]
 80003c6:	e780      	b.n	80002ca <__udivmoddi4+0x6a>
 80003c8:	2320      	movs	r3, #32
 80003ca:	4662      	mov	r2, ip
 80003cc:	0026      	movs	r6, r4
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	40de      	lsrs	r6, r3
 80003d2:	002f      	movs	r7, r5
 80003d4:	46b0      	mov	r8, r6
 80003d6:	4666      	mov	r6, ip
 80003d8:	40b7      	lsls	r7, r6
 80003da:	4646      	mov	r6, r8
 80003dc:	003b      	movs	r3, r7
 80003de:	4333      	orrs	r3, r6
 80003e0:	e7c8      	b.n	8000374 <__udivmoddi4+0x114>
 80003e2:	46c0      	nop			; (mov r8, r8)

080003e4 <__clzdi2>:
 80003e4:	b510      	push	{r4, lr}
 80003e6:	2900      	cmp	r1, #0
 80003e8:	d103      	bne.n	80003f2 <__clzdi2+0xe>
 80003ea:	f000 f807 	bl	80003fc <__clzsi2>
 80003ee:	3020      	adds	r0, #32
 80003f0:	e002      	b.n	80003f8 <__clzdi2+0x14>
 80003f2:	1c08      	adds	r0, r1, #0
 80003f4:	f000 f802 	bl	80003fc <__clzsi2>
 80003f8:	bd10      	pop	{r4, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__clzsi2>:
 80003fc:	211c      	movs	r1, #28
 80003fe:	2301      	movs	r3, #1
 8000400:	041b      	lsls	r3, r3, #16
 8000402:	4298      	cmp	r0, r3
 8000404:	d301      	bcc.n	800040a <__clzsi2+0xe>
 8000406:	0c00      	lsrs	r0, r0, #16
 8000408:	3910      	subs	r1, #16
 800040a:	0a1b      	lsrs	r3, r3, #8
 800040c:	4298      	cmp	r0, r3
 800040e:	d301      	bcc.n	8000414 <__clzsi2+0x18>
 8000410:	0a00      	lsrs	r0, r0, #8
 8000412:	3908      	subs	r1, #8
 8000414:	091b      	lsrs	r3, r3, #4
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0x22>
 800041a:	0900      	lsrs	r0, r0, #4
 800041c:	3904      	subs	r1, #4
 800041e:	a202      	add	r2, pc, #8	; (adr r2, 8000428 <__clzsi2+0x2c>)
 8000420:	5c10      	ldrb	r0, [r2, r0]
 8000422:	1840      	adds	r0, r0, r1
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	02020304 	.word	0x02020304
 800042c:	01010101 	.word	0x01010101
	...

08000438 <GPIO_SET_MDIO_MDC_MODE_INPUT>:
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  HAL_GPIO_Init(MIIM_MDIO_GPIO_Port, &GPIO_InitStruct);

}

void GPIO_SET_MDIO_MDC_MODE_INPUT() {
 8000438:	b590      	push	{r4, r7, lr}
 800043a:	b089      	sub	sp, #36	; 0x24
 800043c:	af00      	add	r7, sp, #0
	// Set MIDO pin to it's default status with HAL_GPIO_DeInit
	HAL_GPIO_DeInit(MIIM_MDIO_GPIO_Port, MIIM_MDIO_Pin);
 800043e:	2380      	movs	r3, #128	; 0x80
 8000440:	00da      	lsls	r2, r3, #3
 8000442:	23a0      	movs	r3, #160	; 0xa0
 8000444:	05db      	lsls	r3, r3, #23
 8000446:	0011      	movs	r1, r2
 8000448:	0018      	movs	r0, r3
 800044a:	f000 ff6b 	bl	8001324 <HAL_GPIO_DeInit>

	// Set MDC pin to its default status with HAL_GPIO_Deinit
	HAL_GPIO_DeInit(MIIM_MDC_GPIO_Port, MIIM_MDC_Pin);
 800044e:	23a0      	movs	r3, #160	; 0xa0
 8000450:	05db      	lsls	r3, r3, #23
 8000452:	2110      	movs	r1, #16
 8000454:	0018      	movs	r0, r3
 8000456:	f000 ff65 	bl	8001324 <HAL_GPIO_DeInit>

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045a:	240c      	movs	r4, #12
 800045c:	193b      	adds	r3, r7, r4
 800045e:	0018      	movs	r0, r3
 8000460:	2314      	movs	r3, #20
 8000462:	001a      	movs	r2, r3
 8000464:	2100      	movs	r1, #0
 8000466:	f002 fcf1 	bl	8002e4c <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800046a:	4b38      	ldr	r3, [pc, #224]	; (800054c <GPIO_SET_MDIO_MDC_MODE_INPUT+0x114>)
 800046c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800046e:	4b37      	ldr	r3, [pc, #220]	; (800054c <GPIO_SET_MDIO_MDC_MODE_INPUT+0x114>)
 8000470:	2104      	movs	r1, #4
 8000472:	430a      	orrs	r2, r1
 8000474:	62da      	str	r2, [r3, #44]	; 0x2c
 8000476:	4b35      	ldr	r3, [pc, #212]	; (800054c <GPIO_SET_MDIO_MDC_MODE_INPUT+0x114>)
 8000478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800047a:	2204      	movs	r2, #4
 800047c:	4013      	ands	r3, r2
 800047e:	60bb      	str	r3, [r7, #8]
 8000480:	68bb      	ldr	r3, [r7, #8]
 	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000482:	4b32      	ldr	r3, [pc, #200]	; (800054c <GPIO_SET_MDIO_MDC_MODE_INPUT+0x114>)
 8000484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000486:	4b31      	ldr	r3, [pc, #196]	; (800054c <GPIO_SET_MDIO_MDC_MODE_INPUT+0x114>)
 8000488:	2101      	movs	r1, #1
 800048a:	430a      	orrs	r2, r1
 800048c:	62da      	str	r2, [r3, #44]	; 0x2c
 800048e:	4b2f      	ldr	r3, [pc, #188]	; (800054c <GPIO_SET_MDIO_MDC_MODE_INPUT+0x114>)
 8000490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000492:	2201      	movs	r2, #1
 8000494:	4013      	ands	r3, r2
 8000496:	607b      	str	r3, [r7, #4]
 8000498:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 800049a:	2380      	movs	r3, #128	; 0x80
 800049c:	01db      	lsls	r3, r3, #7
 800049e:	482c      	ldr	r0, [pc, #176]	; (8000550 <GPIO_SET_MDIO_MDC_MODE_INPUT+0x118>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	0019      	movs	r1, r3
 80004a4:	f001 f808 	bl	80014b8 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80004a8:	23a0      	movs	r3, #160	; 0xa0
 80004aa:	05db      	lsls	r3, r3, #23
 80004ac:	2200      	movs	r2, #0
 80004ae:	2182      	movs	r1, #130	; 0x82
 80004b0:	0018      	movs	r0, r3
 80004b2:	f001 f801 	bl	80014b8 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : LED_BLUE_Pin */
	  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 80004b6:	193b      	adds	r3, r7, r4
 80004b8:	2280      	movs	r2, #128	; 0x80
 80004ba:	01d2      	lsls	r2, r2, #7
 80004bc:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004be:	193b      	adds	r3, r7, r4
 80004c0:	2201      	movs	r2, #1
 80004c2:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c4:	193b      	adds	r3, r7, r4
 80004c6:	2200      	movs	r2, #0
 80004c8:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ca:	193b      	adds	r3, r7, r4
 80004cc:	2200      	movs	r2, #0
 80004ce:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 80004d0:	193b      	adds	r3, r7, r4
 80004d2:	4a1f      	ldr	r2, [pc, #124]	; (8000550 <GPIO_SET_MDIO_MDC_MODE_INPUT+0x118>)
 80004d4:	0019      	movs	r1, r3
 80004d6:	0010      	movs	r0, r2
 80004d8:	f000 fdbe 	bl	8001058 <HAL_GPIO_Init>

	  /*Configure GPIO pins : LED_RED_Pin MIIM_MDC_Pin LED_GREEN_Pin */
	  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin;
 80004dc:	193b      	adds	r3, r7, r4
 80004de:	2282      	movs	r2, #130	; 0x82
 80004e0:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e2:	193b      	adds	r3, r7, r4
 80004e4:	2201      	movs	r2, #1
 80004e6:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e8:	193b      	adds	r3, r7, r4
 80004ea:	2200      	movs	r2, #0
 80004ec:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ee:	193b      	adds	r3, r7, r4
 80004f0:	2200      	movs	r2, #0
 80004f2:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f4:	193a      	adds	r2, r7, r4
 80004f6:	23a0      	movs	r3, #160	; 0xa0
 80004f8:	05db      	lsls	r3, r3, #23
 80004fa:	0011      	movs	r1, r2
 80004fc:	0018      	movs	r0, r3
 80004fe:	f000 fdab 	bl	8001058 <HAL_GPIO_Init>

	  /*Configure GPIO pin : MIIM_MDIO_Pin */
	  GPIO_InitStruct.Pin = MIIM_MDIO_Pin;
 8000502:	193b      	adds	r3, r7, r4
 8000504:	2280      	movs	r2, #128	; 0x80
 8000506:	00d2      	lsls	r2, r2, #3
 8000508:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800050a:	193b      	adds	r3, r7, r4
 800050c:	2200      	movs	r2, #0
 800050e:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000510:	193b      	adds	r3, r7, r4
 8000512:	2200      	movs	r2, #0
 8000514:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(MIIM_MDIO_GPIO_Port, &GPIO_InitStruct);
 8000516:	193a      	adds	r2, r7, r4
 8000518:	23a0      	movs	r3, #160	; 0xa0
 800051a:	05db      	lsls	r3, r3, #23
 800051c:	0011      	movs	r1, r2
 800051e:	0018      	movs	r0, r3
 8000520:	f000 fd9a 	bl	8001058 <HAL_GPIO_Init>

	  /*Configure GPIO pin : MIIM_MDC_Pin */
	  GPIO_InitStruct.Pin = MIIM_MDC_Pin;
 8000524:	193b      	adds	r3, r7, r4
 8000526:	2210      	movs	r2, #16
 8000528:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800052a:	193b      	adds	r3, r7, r4
 800052c:	2200      	movs	r2, #0
 800052e:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000530:	193b      	adds	r3, r7, r4
 8000532:	2200      	movs	r2, #0
 8000534:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(MIIM_MDC_GPIO_Port, &GPIO_InitStruct);
 8000536:	193a      	adds	r2, r7, r4
 8000538:	23a0      	movs	r3, #160	; 0xa0
 800053a:	05db      	lsls	r3, r3, #23
 800053c:	0011      	movs	r1, r2
 800053e:	0018      	movs	r0, r3
 8000540:	f000 fd8a 	bl	8001058 <HAL_GPIO_Init>

}
 8000544:	46c0      	nop			; (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	b009      	add	sp, #36	; 0x24
 800054a:	bd90      	pop	{r4, r7, pc}
 800054c:	40021000 	.word	0x40021000
 8000550:	50000800 	.word	0x50000800

08000554 <_MIIM_DRIVER_CLOCK_PULSE>:


void _MIIM_DRIVER_CLOCK_PULSE() {
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, MIIM_MDC_Pin, GPIO_PIN_RESET);
 8000558:	23a0      	movs	r3, #160	; 0xa0
 800055a:	05db      	lsls	r3, r3, #23
 800055c:	2200      	movs	r2, #0
 800055e:	2110      	movs	r1, #16
 8000560:	0018      	movs	r0, r3
 8000562:	f000 ffa9 	bl	80014b8 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8000566:	2002      	movs	r0, #2
 8000568:	f000 fc32 	bl	8000dd0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, MIIM_MDC_Pin, GPIO_PIN_SET);
 800056c:	23a0      	movs	r3, #160	; 0xa0
 800056e:	05db      	lsls	r3, r3, #23
 8000570:	2201      	movs	r2, #1
 8000572:	2110      	movs	r1, #16
 8000574:	0018      	movs	r0, r3
 8000576:	f000 ff9f 	bl	80014b8 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 800057a:	2002      	movs	r0, #2
 800057c:	f000 fc28 	bl	8000dd0 <HAL_Delay>
}
 8000580:	46c0      	nop			; (mov r8, r8)
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}

08000586 <_MIIM_DRIVER_START>:

void _MIIM_DRIVER_START() {
 8000586:	b580      	push	{r7, lr}
 8000588:	b082      	sub	sp, #8
 800058a:	af00      	add	r7, sp, #0
	// Preamble
	//HAL_GPIO_WritePin(GPIOA, MIIM_MDIO_Pin, GPIO_PIN_SET);

	for (uint8_t i=0; i<5; ++i) {
 800058c:	1dfb      	adds	r3, r7, #7
 800058e:	2200      	movs	r2, #0
 8000590:	701a      	strb	r2, [r3, #0]
 8000592:	e006      	b.n	80005a2 <_MIIM_DRIVER_START+0x1c>
		_MIIM_DRIVER_CLOCK_PULSE();
 8000594:	f7ff ffde 	bl	8000554 <_MIIM_DRIVER_CLOCK_PULSE>
	for (uint8_t i=0; i<5; ++i) {
 8000598:	1dfb      	adds	r3, r7, #7
 800059a:	1dfa      	adds	r2, r7, #7
 800059c:	7812      	ldrb	r2, [r2, #0]
 800059e:	3201      	adds	r2, #1
 80005a0:	701a      	strb	r2, [r3, #0]
 80005a2:	1dfb      	adds	r3, r7, #7
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b04      	cmp	r3, #4
 80005a8:	d9f4      	bls.n	8000594 <_MIIM_DRIVER_START+0xe>
	}

	// Start clock
	HAL_GPIO_WritePin(GPIOA, MIIM_MDIO_Pin, GPIO_PIN_RESET);
 80005aa:	2380      	movs	r3, #128	; 0x80
 80005ac:	00d9      	lsls	r1, r3, #3
 80005ae:	23a0      	movs	r3, #160	; 0xa0
 80005b0:	05db      	lsls	r3, r3, #23
 80005b2:	2200      	movs	r2, #0
 80005b4:	0018      	movs	r0, r3
 80005b6:	f000 ff7f 	bl	80014b8 <HAL_GPIO_WritePin>
	_MIIM_DRIVER_CLOCK_PULSE();
 80005ba:	f7ff ffcb 	bl	8000554 <_MIIM_DRIVER_CLOCK_PULSE>
	HAL_GPIO_WritePin(GPIOA, MIIM_MDIO_Pin, GPIO_PIN_SET);
 80005be:	2380      	movs	r3, #128	; 0x80
 80005c0:	00d9      	lsls	r1, r3, #3
 80005c2:	23a0      	movs	r3, #160	; 0xa0
 80005c4:	05db      	lsls	r3, r3, #23
 80005c6:	2201      	movs	r2, #1
 80005c8:	0018      	movs	r0, r3
 80005ca:	f000 ff75 	bl	80014b8 <HAL_GPIO_WritePin>
	_MIIM_DRIVER_CLOCK_PULSE();
 80005ce:	f7ff ffc1 	bl	8000554 <_MIIM_DRIVER_CLOCK_PULSE>
}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	46bd      	mov	sp, r7
 80005d6:	b002      	add	sp, #8
 80005d8:	bd80      	pop	{r7, pc}

080005da <_MIIM_DRIVER_OP_CODE_READ>:

void _MIIM_DRIVER_OP_CODE_READ() {
 80005da:	b580      	push	{r7, lr}
 80005dc:	af00      	add	r7, sp, #0
	// data = 0b10
	HAL_GPIO_WritePin(GPIOA, MIIM_MDIO_Pin, GPIO_PIN_SET);
 80005de:	2380      	movs	r3, #128	; 0x80
 80005e0:	00d9      	lsls	r1, r3, #3
 80005e2:	23a0      	movs	r3, #160	; 0xa0
 80005e4:	05db      	lsls	r3, r3, #23
 80005e6:	2201      	movs	r2, #1
 80005e8:	0018      	movs	r0, r3
 80005ea:	f000 ff65 	bl	80014b8 <HAL_GPIO_WritePin>
	_MIIM_DRIVER_CLOCK_PULSE();
 80005ee:	f7ff ffb1 	bl	8000554 <_MIIM_DRIVER_CLOCK_PULSE>
	HAL_GPIO_WritePin(GPIOA, MIIM_MDIO_Pin, GPIO_PIN_RESET);
 80005f2:	2380      	movs	r3, #128	; 0x80
 80005f4:	00d9      	lsls	r1, r3, #3
 80005f6:	23a0      	movs	r3, #160	; 0xa0
 80005f8:	05db      	lsls	r3, r3, #23
 80005fa:	2200      	movs	r2, #0
 80005fc:	0018      	movs	r0, r3
 80005fe:	f000 ff5b 	bl	80014b8 <HAL_GPIO_WritePin>
	_MIIM_DRIVER_CLOCK_PULSE();
 8000602:	f7ff ffa7 	bl	8000554 <_MIIM_DRIVER_CLOCK_PULSE>
}
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <_MIIM_DRIVER_OP_CODE_WRITE>:

void _MIIM_DRIVER_OP_CODE_WRITE() {
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	// Data = 0b01
	HAL_GPIO_WritePin(GPIOA, MIIM_MDIO_Pin, GPIO_PIN_RESET);
 8000610:	2380      	movs	r3, #128	; 0x80
 8000612:	00d9      	lsls	r1, r3, #3
 8000614:	23a0      	movs	r3, #160	; 0xa0
 8000616:	05db      	lsls	r3, r3, #23
 8000618:	2200      	movs	r2, #0
 800061a:	0018      	movs	r0, r3
 800061c:	f000 ff4c 	bl	80014b8 <HAL_GPIO_WritePin>
	_MIIM_DRIVER_CLOCK_PULSE();
 8000620:	f7ff ff98 	bl	8000554 <_MIIM_DRIVER_CLOCK_PULSE>
	HAL_GPIO_WritePin(GPIOA, MIIM_MDIO_Pin, GPIO_PIN_SET);
 8000624:	2380      	movs	r3, #128	; 0x80
 8000626:	00d9      	lsls	r1, r3, #3
 8000628:	23a0      	movs	r3, #160	; 0xa0
 800062a:	05db      	lsls	r3, r3, #23
 800062c:	2201      	movs	r2, #1
 800062e:	0018      	movs	r0, r3
 8000630:	f000 ff42 	bl	80014b8 <HAL_GPIO_WritePin>
	_MIIM_DRIVER_CLOCK_PULSE();
 8000634:	f7ff ff8e 	bl	8000554 <_MIIM_DRIVER_CLOCK_PULSE>
}
 8000638:	46c0      	nop			; (mov r8, r8)
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <_MIIM_DRIVER_PHY_REG_OUTPUT>:

void _MIIM_DRIVER_PHY_REG_OUTPUT(uint8_t PHY, uint8_t REG) {
 800063e:	b580      	push	{r7, lr}
 8000640:	b084      	sub	sp, #16
 8000642:	af00      	add	r7, sp, #0
 8000644:	0002      	movs	r2, r0
 8000646:	1dfb      	adds	r3, r7, #7
 8000648:	701a      	strb	r2, [r3, #0]
 800064a:	1dbb      	adds	r3, r7, #6
 800064c:	1c0a      	adds	r2, r1, #0
 800064e:	701a      	strb	r2, [r3, #0]
	// Send the PHY address first
	for (uint8_t bitnum = 0; bitnum <= 4; ++bitnum) {
 8000650:	230f      	movs	r3, #15
 8000652:	18fb      	adds	r3, r7, r3
 8000654:	2200      	movs	r2, #0
 8000656:	701a      	strb	r2, [r3, #0]
 8000658:	e024      	b.n	80006a4 <_MIIM_DRIVER_PHY_REG_OUTPUT+0x66>
		if ((PHY & (1 << (4-bitnum))) == 0) {
 800065a:	1dfb      	adds	r3, r7, #7
 800065c:	781a      	ldrb	r2, [r3, #0]
 800065e:	230f      	movs	r3, #15
 8000660:	18fb      	adds	r3, r7, r3
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2104      	movs	r1, #4
 8000666:	1acb      	subs	r3, r1, r3
 8000668:	411a      	asrs	r2, r3
 800066a:	0013      	movs	r3, r2
 800066c:	2201      	movs	r2, #1
 800066e:	4013      	ands	r3, r2
 8000670:	d108      	bne.n	8000684 <_MIIM_DRIVER_PHY_REG_OUTPUT+0x46>
			HAL_GPIO_WritePin(GPIOA, MIIM_MDIO_Pin, GPIO_PIN_RESET);
 8000672:	2380      	movs	r3, #128	; 0x80
 8000674:	00d9      	lsls	r1, r3, #3
 8000676:	23a0      	movs	r3, #160	; 0xa0
 8000678:	05db      	lsls	r3, r3, #23
 800067a:	2200      	movs	r2, #0
 800067c:	0018      	movs	r0, r3
 800067e:	f000 ff1b 	bl	80014b8 <HAL_GPIO_WritePin>
 8000682:	e007      	b.n	8000694 <_MIIM_DRIVER_PHY_REG_OUTPUT+0x56>
		} else {
			HAL_GPIO_WritePin(GPIOA, MIIM_MDIO_Pin, GPIO_PIN_SET);
 8000684:	2380      	movs	r3, #128	; 0x80
 8000686:	00d9      	lsls	r1, r3, #3
 8000688:	23a0      	movs	r3, #160	; 0xa0
 800068a:	05db      	lsls	r3, r3, #23
 800068c:	2201      	movs	r2, #1
 800068e:	0018      	movs	r0, r3
 8000690:	f000 ff12 	bl	80014b8 <HAL_GPIO_WritePin>
		}
		_MIIM_DRIVER_CLOCK_PULSE();
 8000694:	f7ff ff5e 	bl	8000554 <_MIIM_DRIVER_CLOCK_PULSE>
	for (uint8_t bitnum = 0; bitnum <= 4; ++bitnum) {
 8000698:	220f      	movs	r2, #15
 800069a:	18bb      	adds	r3, r7, r2
 800069c:	18ba      	adds	r2, r7, r2
 800069e:	7812      	ldrb	r2, [r2, #0]
 80006a0:	3201      	adds	r2, #1
 80006a2:	701a      	strb	r2, [r3, #0]
 80006a4:	230f      	movs	r3, #15
 80006a6:	18fb      	adds	r3, r7, r3
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b04      	cmp	r3, #4
 80006ac:	d9d5      	bls.n	800065a <_MIIM_DRIVER_PHY_REG_OUTPUT+0x1c>
	}

	// Send the REG address first
	for (uint8_t bitnum = 0; bitnum <= 4; ++bitnum) {
 80006ae:	230e      	movs	r3, #14
 80006b0:	18fb      	adds	r3, r7, r3
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]
 80006b6:	e024      	b.n	8000702 <_MIIM_DRIVER_PHY_REG_OUTPUT+0xc4>
		if ((REG & (1 << (4-bitnum))) == 0) {
 80006b8:	1dbb      	adds	r3, r7, #6
 80006ba:	781a      	ldrb	r2, [r3, #0]
 80006bc:	230e      	movs	r3, #14
 80006be:	18fb      	adds	r3, r7, r3
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2104      	movs	r1, #4
 80006c4:	1acb      	subs	r3, r1, r3
 80006c6:	411a      	asrs	r2, r3
 80006c8:	0013      	movs	r3, r2
 80006ca:	2201      	movs	r2, #1
 80006cc:	4013      	ands	r3, r2
 80006ce:	d108      	bne.n	80006e2 <_MIIM_DRIVER_PHY_REG_OUTPUT+0xa4>
			HAL_GPIO_WritePin(GPIOA, MIIM_MDIO_Pin, GPIO_PIN_RESET);
 80006d0:	2380      	movs	r3, #128	; 0x80
 80006d2:	00d9      	lsls	r1, r3, #3
 80006d4:	23a0      	movs	r3, #160	; 0xa0
 80006d6:	05db      	lsls	r3, r3, #23
 80006d8:	2200      	movs	r2, #0
 80006da:	0018      	movs	r0, r3
 80006dc:	f000 feec 	bl	80014b8 <HAL_GPIO_WritePin>
 80006e0:	e007      	b.n	80006f2 <_MIIM_DRIVER_PHY_REG_OUTPUT+0xb4>
		} else {
			HAL_GPIO_WritePin(GPIOA, MIIM_MDIO_Pin, GPIO_PIN_SET);
 80006e2:	2380      	movs	r3, #128	; 0x80
 80006e4:	00d9      	lsls	r1, r3, #3
 80006e6:	23a0      	movs	r3, #160	; 0xa0
 80006e8:	05db      	lsls	r3, r3, #23
 80006ea:	2201      	movs	r2, #1
 80006ec:	0018      	movs	r0, r3
 80006ee:	f000 fee3 	bl	80014b8 <HAL_GPIO_WritePin>
		}
		_MIIM_DRIVER_CLOCK_PULSE();
 80006f2:	f7ff ff2f 	bl	8000554 <_MIIM_DRIVER_CLOCK_PULSE>
	for (uint8_t bitnum = 0; bitnum <= 4; ++bitnum) {
 80006f6:	220e      	movs	r2, #14
 80006f8:	18bb      	adds	r3, r7, r2
 80006fa:	18ba      	adds	r2, r7, r2
 80006fc:	7812      	ldrb	r2, [r2, #0]
 80006fe:	3201      	adds	r2, #1
 8000700:	701a      	strb	r2, [r3, #0]
 8000702:	230e      	movs	r3, #14
 8000704:	18fb      	adds	r3, r7, r3
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b04      	cmp	r3, #4
 800070a:	d9d5      	bls.n	80006b8 <_MIIM_DRIVER_PHY_REG_OUTPUT+0x7a>
	}
}
 800070c:	46c0      	nop			; (mov r8, r8)
 800070e:	46bd      	mov	sp, r7
 8000710:	b004      	add	sp, #16
 8000712:	bd80      	pop	{r7, pc}

08000714 <_MIIM_DRIVER_TA_WRITE>:

void _MIIM_DRIVER_TA_WRITE() {
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
	// The Turnaround bits for write are the same as the op code
	_MIIM_DRIVER_OP_CODE_READ();
 8000718:	f7ff ff5f 	bl	80005da <_MIIM_DRIVER_OP_CODE_READ>
}
 800071c:	46c0      	nop			; (mov r8, r8)
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <_MIIM_DRIVER_WRITE_DATA>:
	MX_GPIO_Init();
	HAL_GPIO_WritePin(GPIOA, MIIM_MDIO_Pin, GPIO_PIN_RESET);
	_MIIM_DRIVER_CLOCK_PULSE();
}

void _MIIM_DRIVER_WRITE_DATA(uint16_t data) {
 8000722:	b580      	push	{r7, lr}
 8000724:	b084      	sub	sp, #16
 8000726:	af00      	add	r7, sp, #0
 8000728:	0002      	movs	r2, r0
 800072a:	1dbb      	adds	r3, r7, #6
 800072c:	801a      	strh	r2, [r3, #0]
	for (uint8_t bitnum = 0; bitnum <= 15; ++bitnum) {
 800072e:	230f      	movs	r3, #15
 8000730:	18fb      	adds	r3, r7, r3
 8000732:	2200      	movs	r2, #0
 8000734:	701a      	strb	r2, [r3, #0]
 8000736:	e024      	b.n	8000782 <_MIIM_DRIVER_WRITE_DATA+0x60>
		if ((data & (1<<(15-bitnum))) == 0) {
 8000738:	1dbb      	adds	r3, r7, #6
 800073a:	881a      	ldrh	r2, [r3, #0]
 800073c:	230f      	movs	r3, #15
 800073e:	18fb      	adds	r3, r7, r3
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	210f      	movs	r1, #15
 8000744:	1acb      	subs	r3, r1, r3
 8000746:	411a      	asrs	r2, r3
 8000748:	0013      	movs	r3, r2
 800074a:	2201      	movs	r2, #1
 800074c:	4013      	ands	r3, r2
 800074e:	d108      	bne.n	8000762 <_MIIM_DRIVER_WRITE_DATA+0x40>
			HAL_GPIO_WritePin(GPIOA, MIIM_MDIO_Pin, GPIO_PIN_RESET);
 8000750:	2380      	movs	r3, #128	; 0x80
 8000752:	00d9      	lsls	r1, r3, #3
 8000754:	23a0      	movs	r3, #160	; 0xa0
 8000756:	05db      	lsls	r3, r3, #23
 8000758:	2200      	movs	r2, #0
 800075a:	0018      	movs	r0, r3
 800075c:	f000 feac 	bl	80014b8 <HAL_GPIO_WritePin>
 8000760:	e007      	b.n	8000772 <_MIIM_DRIVER_WRITE_DATA+0x50>
		} else {
			HAL_GPIO_WritePin(GPIOA, MIIM_MDIO_Pin, GPIO_PIN_SET);
 8000762:	2380      	movs	r3, #128	; 0x80
 8000764:	00d9      	lsls	r1, r3, #3
 8000766:	23a0      	movs	r3, #160	; 0xa0
 8000768:	05db      	lsls	r3, r3, #23
 800076a:	2201      	movs	r2, #1
 800076c:	0018      	movs	r0, r3
 800076e:	f000 fea3 	bl	80014b8 <HAL_GPIO_WritePin>
		}
		_MIIM_DRIVER_CLOCK_PULSE();
 8000772:	f7ff feef 	bl	8000554 <_MIIM_DRIVER_CLOCK_PULSE>
	for (uint8_t bitnum = 0; bitnum <= 15; ++bitnum) {
 8000776:	220f      	movs	r2, #15
 8000778:	18bb      	adds	r3, r7, r2
 800077a:	18ba      	adds	r2, r7, r2
 800077c:	7812      	ldrb	r2, [r2, #0]
 800077e:	3201      	adds	r2, #1
 8000780:	701a      	strb	r2, [r3, #0]
 8000782:	230f      	movs	r3, #15
 8000784:	18fb      	adds	r3, r7, r3
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b0f      	cmp	r3, #15
 800078a:	d9d5      	bls.n	8000738 <_MIIM_DRIVER_WRITE_DATA+0x16>
	}
	// reset clock and data
	HAL_GPIO_WritePin(GPIOA, MIIM_MDIO_Pin, GPIO_PIN_SET);
 800078c:	2380      	movs	r3, #128	; 0x80
 800078e:	00d9      	lsls	r1, r3, #3
 8000790:	23a0      	movs	r3, #160	; 0xa0
 8000792:	05db      	lsls	r3, r3, #23
 8000794:	2201      	movs	r2, #1
 8000796:	0018      	movs	r0, r3
 8000798:	f000 fe8e 	bl	80014b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, MIIM_MDC_Pin, GPIO_PIN_RESET);
 800079c:	23a0      	movs	r3, #160	; 0xa0
 800079e:	05db      	lsls	r3, r3, #23
 80007a0:	2200      	movs	r2, #0
 80007a2:	2110      	movs	r1, #16
 80007a4:	0018      	movs	r0, r3
 80007a6:	f000 fe87 	bl	80014b8 <HAL_GPIO_WritePin>
	// final clock pulse afterwards?
}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	46bd      	mov	sp, r7
 80007ae:	b004      	add	sp, #16
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <MIIM_DRIVER_WRITE>:
}



// Define MIIM bit banging functions here
void MIIM_DRIVER_WRITE(uint8_t PHY, uint8_t REG, uint16_t DATA) {
 80007b2:	b590      	push	{r4, r7, lr}
 80007b4:	b083      	sub	sp, #12
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	0004      	movs	r4, r0
 80007ba:	0008      	movs	r0, r1
 80007bc:	0011      	movs	r1, r2
 80007be:	1dfb      	adds	r3, r7, #7
 80007c0:	1c22      	adds	r2, r4, #0
 80007c2:	701a      	strb	r2, [r3, #0]
 80007c4:	1dbb      	adds	r3, r7, #6
 80007c6:	1c02      	adds	r2, r0, #0
 80007c8:	701a      	strb	r2, [r3, #0]
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	1c0a      	adds	r2, r1, #0
 80007ce:	801a      	strh	r2, [r3, #0]
       	DATA (uint16_t): The data to be send to the PHY register
    Returns:
        void
    */
	// Write the preamble + start code
	_MIIM_DRIVER_START();
 80007d0:	f7ff fed9 	bl	8000586 <_MIIM_DRIVER_START>

	// op code
	_MIIM_DRIVER_OP_CODE_WRITE();
 80007d4:	f7ff ff1a 	bl	800060c <_MIIM_DRIVER_OP_CODE_WRITE>

	// write PHY and REG
	_MIIM_DRIVER_PHY_REG_OUTPUT(PHY, REG);
 80007d8:	1dbb      	adds	r3, r7, #6
 80007da:	781a      	ldrb	r2, [r3, #0]
 80007dc:	1dfb      	adds	r3, r7, #7
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	0011      	movs	r1, r2
 80007e2:	0018      	movs	r0, r3
 80007e4:	f7ff ff2b 	bl	800063e <_MIIM_DRIVER_PHY_REG_OUTPUT>

	// TA bits
	_MIIM_DRIVER_TA_WRITE();
 80007e8:	f7ff ff94 	bl	8000714 <_MIIM_DRIVER_TA_WRITE>

	// write data
	_MIIM_DRIVER_WRITE_DATA(DATA);
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	881b      	ldrh	r3, [r3, #0]
 80007f0:	0018      	movs	r0, r3
 80007f2:	f7ff ff96 	bl	8000722 <_MIIM_DRIVER_WRITE_DATA>

}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	46bd      	mov	sp, r7
 80007fa:	b003      	add	sp, #12
 80007fc:	bd90      	pop	{r4, r7, pc}

080007fe <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007fe:	b590      	push	{r4, r7, lr}
 8000800:	b085      	sub	sp, #20
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000804:	f000 fa74 	bl	8000cf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000808:	f000 f84e 	bl	80008a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800080c:	f000 f8e8 	bl	80009e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000810:	f000 f8b6 	bl	8000980 <MX_USART2_UART_Init>
  // Try to configure the port mirroring settings once
  // We may need to write to the chip multiple times
  // If that is the case, we may need to change our starting conditions so that they only work first time.

  // (0) Declare and define PHY and REG variables,
  uint8_t PHY = 20;
 8000814:	230e      	movs	r3, #14
 8000816:	18fb      	adds	r3, r7, r3
 8000818:	2214      	movs	r2, #20
 800081a:	701a      	strb	r2, [r3, #0]
  uint8_t REG3 = 3;
 800081c:	230d      	movs	r3, #13
 800081e:	18fb      	adds	r3, r7, r3
 8000820:	2203      	movs	r2, #3
 8000822:	701a      	strb	r2, [r3, #0]
  uint8_t REG4 = 4;
 8000824:	230c      	movs	r3, #12
 8000826:	18fb      	adds	r3, r7, r3
 8000828:	2204      	movs	r2, #4
 800082a:	701a      	strb	r2, [r3, #0]


  // (1) Enable port mirroring by writing to 20.3[15] - PHY=20, REG = 3, bitnum = 15
  uint8_t PORT_MIRROR_EN = 0b1;
 800082c:	210b      	movs	r1, #11
 800082e:	187b      	adds	r3, r7, r1
 8000830:	2201      	movs	r2, #1
 8000832:	701a      	strb	r2, [r3, #0]
  //uint8_t SEL_MIRROR_PORT = 0b111;

  // (3) Select the port mirroring mode - in this case we only want to mirror RX traffic
  // Not necessary as this is also enabled by default
  // Now we want to mirror RX and TX traffic
  uint8_t PORT_MIRROR_MODE = 0b00;
 8000834:	200a      	movs	r0, #10
 8000836:	183b      	adds	r3, r7, r0
 8000838:	2200      	movs	r2, #0
 800083a:	701a      	strb	r2, [r3, #0]

  // (4) Select the RX source port that will have it's RX data flow mirrored to the sniffer port
  // Select port 2 (port 2 of the chip) to be the RX
  uint8_t SEL_RX_PORT_MIRROR = 0b01000000;
 800083c:	2409      	movs	r4, #9
 800083e:	193b      	adds	r3, r7, r4
 8000840:	2240      	movs	r2, #64	; 0x40
 8000842:	701a      	strb	r2, [r3, #0]
  // Also, the default for REG3 is all 0's for the bits that we aren't writing to
  // Hence we can (in theory) construct our data packet from just PORT_MIRROR_EN and SEL_RX_PORT_MIRROR
  // without any consideration for what was already written to REG3.
  // Bare in mind that we are writing to the reserved bits 20.3[12:8] - I am unsure hwo the IP175G actually manages that
  // My guess is that these reserved bits never actually get written to even when you do the write command.
  uint16_t PORT_MIRROR_CONFIG_REG3 = (((uint16_t) PORT_MIRROR_EN) << 15) | (((uint16_t) PORT_MIRROR_MODE) << 13) | (SEL_RX_PORT_MIRROR);
 8000844:	187b      	adds	r3, r7, r1
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	03db      	lsls	r3, r3, #15
 800084a:	b21a      	sxth	r2, r3
 800084c:	183b      	adds	r3, r7, r0
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	035b      	lsls	r3, r3, #13
 8000852:	b21b      	sxth	r3, r3
 8000854:	4313      	orrs	r3, r2
 8000856:	b21a      	sxth	r2, r3
 8000858:	193b      	adds	r3, r7, r4
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	b21b      	sxth	r3, r3
 800085e:	4313      	orrs	r3, r2
 8000860:	b21a      	sxth	r2, r3
 8000862:	1dbb      	adds	r3, r7, #6
 8000864:	801a      	strh	r2, [r3, #0]
  //uint16_t PORT_MIRROR_CONFIG_REG3 = (((uint16_t) PORT_MIRROR_EN) << 15) | (((uint16_t) PORT_MIRROR_MODE) << 13);
  //uint16_t PORT_MIRROR_CONFIG_REG4 = ((uint16_t) SEL_MIRROR_PORT << 13 | SEL_TX_PORT_MIRROR);
  //uint16_t PORT_MIRROR_CONFIG_REG4 = ((uint16_t) SEL_MIRROR_PORT << 13 |

  // (6) Execute the command to write the configurations for port mirroring
  for (uint8_t j = 0; j <= 10; j++) {
 8000866:	230f      	movs	r3, #15
 8000868:	18fb      	adds	r3, r7, r3
 800086a:	2200      	movs	r2, #0
 800086c:	701a      	strb	r2, [r3, #0]
 800086e:	e013      	b.n	8000898 <main+0x9a>
 	 HAL_Delay(5);
 8000870:	2005      	movs	r0, #5
 8000872:	f000 faad 	bl	8000dd0 <HAL_Delay>
 	 MIIM_DRIVER_WRITE(PHY, REG3, PORT_MIRROR_CONFIG_REG3);
 8000876:	1dbb      	adds	r3, r7, #6
 8000878:	881a      	ldrh	r2, [r3, #0]
 800087a:	230d      	movs	r3, #13
 800087c:	18fb      	adds	r3, r7, r3
 800087e:	7819      	ldrb	r1, [r3, #0]
 8000880:	230e      	movs	r3, #14
 8000882:	18fb      	adds	r3, r7, r3
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	0018      	movs	r0, r3
 8000888:	f7ff ff93 	bl	80007b2 <MIIM_DRIVER_WRITE>
  for (uint8_t j = 0; j <= 10; j++) {
 800088c:	210f      	movs	r1, #15
 800088e:	187b      	adds	r3, r7, r1
 8000890:	781a      	ldrb	r2, [r3, #0]
 8000892:	187b      	adds	r3, r7, r1
 8000894:	3201      	adds	r2, #1
 8000896:	701a      	strb	r2, [r3, #0]
 8000898:	230f      	movs	r3, #15
 800089a:	18fb      	adds	r3, r7, r3
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	2b0a      	cmp	r3, #10
 80008a0:	d9e6      	bls.n	8000870 <main+0x72>
//  for (uint8_t l = 0; l <= 5; l++) {
//	  uint16_t PBV_MEMBER_P34 = MIIM_DRIVER_READ(PHY23, REG18);
//	  HAL_Delay(5);
//  }

  GPIO_SET_MDIO_MDC_MODE_INPUT();
 80008a2:	f7ff fdc9 	bl	8000438 <GPIO_SET_MDIO_MDC_MODE_INPUT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <main+0xa8>

080008a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a8:	b590      	push	{r4, r7, lr}
 80008aa:	b099      	sub	sp, #100	; 0x64
 80008ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ae:	242c      	movs	r4, #44	; 0x2c
 80008b0:	193b      	adds	r3, r7, r4
 80008b2:	0018      	movs	r0, r3
 80008b4:	2334      	movs	r3, #52	; 0x34
 80008b6:	001a      	movs	r2, r3
 80008b8:	2100      	movs	r1, #0
 80008ba:	f002 fac7 	bl	8002e4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008be:	2318      	movs	r3, #24
 80008c0:	18fb      	adds	r3, r7, r3
 80008c2:	0018      	movs	r0, r3
 80008c4:	2314      	movs	r3, #20
 80008c6:	001a      	movs	r2, r3
 80008c8:	2100      	movs	r1, #0
 80008ca:	f002 fabf 	bl	8002e4c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008ce:	003b      	movs	r3, r7
 80008d0:	0018      	movs	r0, r3
 80008d2:	2318      	movs	r3, #24
 80008d4:	001a      	movs	r2, r3
 80008d6:	2100      	movs	r1, #0
 80008d8:	f002 fab8 	bl	8002e4c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008dc:	4b26      	ldr	r3, [pc, #152]	; (8000978 <SystemClock_Config+0xd0>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a26      	ldr	r2, [pc, #152]	; (800097c <SystemClock_Config+0xd4>)
 80008e2:	401a      	ands	r2, r3
 80008e4:	4b24      	ldr	r3, [pc, #144]	; (8000978 <SystemClock_Config+0xd0>)
 80008e6:	2180      	movs	r1, #128	; 0x80
 80008e8:	0109      	lsls	r1, r1, #4
 80008ea:	430a      	orrs	r2, r1
 80008ec:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80008ee:	0021      	movs	r1, r4
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	2210      	movs	r2, #16
 80008f4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008f6:	187b      	adds	r3, r7, r1
 80008f8:	2201      	movs	r2, #1
 80008fa:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	2200      	movs	r2, #0
 8000900:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000902:	187b      	adds	r3, r7, r1
 8000904:	22a0      	movs	r2, #160	; 0xa0
 8000906:	0212      	lsls	r2, r2, #8
 8000908:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800090a:	187b      	adds	r3, r7, r1
 800090c:	2200      	movs	r2, #0
 800090e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000910:	187b      	adds	r3, r7, r1
 8000912:	0018      	movs	r0, r3
 8000914:	f000 fdee 	bl	80014f4 <HAL_RCC_OscConfig>
 8000918:	1e03      	subs	r3, r0, #0
 800091a:	d001      	beq.n	8000920 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800091c:	f000 f8c4 	bl	8000aa8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000920:	2118      	movs	r1, #24
 8000922:	187b      	adds	r3, r7, r1
 8000924:	220f      	movs	r2, #15
 8000926:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000928:	187b      	adds	r3, r7, r1
 800092a:	2200      	movs	r2, #0
 800092c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800092e:	187b      	adds	r3, r7, r1
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000934:	187b      	adds	r3, r7, r1
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800093a:	187b      	adds	r3, r7, r1
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000940:	187b      	adds	r3, r7, r1
 8000942:	2100      	movs	r1, #0
 8000944:	0018      	movs	r0, r3
 8000946:	f001 f94f 	bl	8001be8 <HAL_RCC_ClockConfig>
 800094a:	1e03      	subs	r3, r0, #0
 800094c:	d001      	beq.n	8000952 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800094e:	f000 f8ab 	bl	8000aa8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000952:	003b      	movs	r3, r7
 8000954:	2202      	movs	r2, #2
 8000956:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000958:	003b      	movs	r3, r7
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800095e:	003b      	movs	r3, r7
 8000960:	0018      	movs	r0, r3
 8000962:	f001 fb25 	bl	8001fb0 <HAL_RCCEx_PeriphCLKConfig>
 8000966:	1e03      	subs	r3, r0, #0
 8000968:	d001      	beq.n	800096e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800096a:	f000 f89d 	bl	8000aa8 <Error_Handler>
  }
}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	46bd      	mov	sp, r7
 8000972:	b019      	add	sp, #100	; 0x64
 8000974:	bd90      	pop	{r4, r7, pc}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	40007000 	.word	0x40007000
 800097c:	ffffe7ff 	.word	0xffffe7ff

08000980 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000984:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <MX_USART2_UART_Init+0x58>)
 8000986:	4a15      	ldr	r2, [pc, #84]	; (80009dc <MX_USART2_UART_Init+0x5c>)
 8000988:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800098a:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <MX_USART2_UART_Init+0x58>)
 800098c:	22e1      	movs	r2, #225	; 0xe1
 800098e:	0252      	lsls	r2, r2, #9
 8000990:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_USART2_UART_Init+0x58>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000998:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <MX_USART2_UART_Init+0x58>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <MX_USART2_UART_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <MX_USART2_UART_Init+0x58>)
 80009a6:	220c      	movs	r2, #12
 80009a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <MX_USART2_UART_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b0:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <MX_USART2_UART_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <MX_USART2_UART_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <MX_USART2_UART_Init+0x58>)
 80009be:	2200      	movs	r2, #0
 80009c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009c2:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <MX_USART2_UART_Init+0x58>)
 80009c4:	0018      	movs	r0, r3
 80009c6:	f001 fc1b 	bl	8002200 <HAL_UART_Init>
 80009ca:	1e03      	subs	r3, r0, #0
 80009cc:	d001      	beq.n	80009d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009ce:	f000 f86b 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000028 	.word	0x20000028
 80009dc:	40004400 	.word	0x40004400

080009e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e0:	b590      	push	{r4, r7, lr}
 80009e2:	b089      	sub	sp, #36	; 0x24
 80009e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	240c      	movs	r4, #12
 80009e8:	193b      	adds	r3, r7, r4
 80009ea:	0018      	movs	r0, r3
 80009ec:	2314      	movs	r3, #20
 80009ee:	001a      	movs	r2, r3
 80009f0:	2100      	movs	r1, #0
 80009f2:	f002 fa2b 	bl	8002e4c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f6:	4b29      	ldr	r3, [pc, #164]	; (8000a9c <MX_GPIO_Init+0xbc>)
 80009f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009fa:	4b28      	ldr	r3, [pc, #160]	; (8000a9c <MX_GPIO_Init+0xbc>)
 80009fc:	2104      	movs	r1, #4
 80009fe:	430a      	orrs	r2, r1
 8000a00:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a02:	4b26      	ldr	r3, [pc, #152]	; (8000a9c <MX_GPIO_Init+0xbc>)
 8000a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a06:	2204      	movs	r2, #4
 8000a08:	4013      	ands	r3, r2
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	4b23      	ldr	r3, [pc, #140]	; (8000a9c <MX_GPIO_Init+0xbc>)
 8000a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a12:	4b22      	ldr	r3, [pc, #136]	; (8000a9c <MX_GPIO_Init+0xbc>)
 8000a14:	2101      	movs	r1, #1
 8000a16:	430a      	orrs	r2, r1
 8000a18:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a1a:	4b20      	ldr	r3, [pc, #128]	; (8000a9c <MX_GPIO_Init+0xbc>)
 8000a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a1e:	2201      	movs	r2, #1
 8000a20:	4013      	ands	r3, r2
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8000a26:	2380      	movs	r3, #128	; 0x80
 8000a28:	01db      	lsls	r3, r3, #7
 8000a2a:	481d      	ldr	r0, [pc, #116]	; (8000aa0 <MX_GPIO_Init+0xc0>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	0019      	movs	r1, r3
 8000a30:	f000 fd42 	bl	80014b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|MIIM_MDC_Pin|LED_GREEN_Pin|MIIM_MDIO_Pin, GPIO_PIN_RESET);
 8000a34:	491b      	ldr	r1, [pc, #108]	; (8000aa4 <MX_GPIO_Init+0xc4>)
 8000a36:	23a0      	movs	r3, #160	; 0xa0
 8000a38:	05db      	lsls	r3, r3, #23
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	f000 fd3b 	bl	80014b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8000a42:	193b      	adds	r3, r7, r4
 8000a44:	2280      	movs	r2, #128	; 0x80
 8000a46:	01d2      	lsls	r2, r2, #7
 8000a48:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4a:	193b      	adds	r3, r7, r4
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	193b      	adds	r3, r7, r4
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	0021      	movs	r1, r4
 8000a58:	193b      	adds	r3, r7, r4
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	000c      	movs	r4, r1
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	4a0f      	ldr	r2, [pc, #60]	; (8000aa0 <MX_GPIO_Init+0xc0>)
 8000a64:	0019      	movs	r1, r3
 8000a66:	0010      	movs	r0, r2
 8000a68:	f000 faf6 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin MIIM_MDC_Pin LED_GREEN_Pin MIIM_MDIO_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|MIIM_MDC_Pin|LED_GREEN_Pin|MIIM_MDIO_Pin;
 8000a6c:	0021      	movs	r1, r4
 8000a6e:	187b      	adds	r3, r7, r1
 8000a70:	4a0c      	ldr	r2, [pc, #48]	; (8000aa4 <MX_GPIO_Init+0xc4>)
 8000a72:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a74:	187b      	adds	r3, r7, r1
 8000a76:	2201      	movs	r2, #1
 8000a78:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	187b      	adds	r3, r7, r1
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	187b      	adds	r3, r7, r1
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a86:	187a      	adds	r2, r7, r1
 8000a88:	23a0      	movs	r3, #160	; 0xa0
 8000a8a:	05db      	lsls	r3, r3, #23
 8000a8c:	0011      	movs	r1, r2
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f000 fae2 	bl	8001058 <HAL_GPIO_Init>

}
 8000a94:	46c0      	nop			; (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	b009      	add	sp, #36	; 0x24
 8000a9a:	bd90      	pop	{r4, r7, pc}
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	50000800 	.word	0x50000800
 8000aa4:	00000492 	.word	0x00000492

08000aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000aac:	46c0      	nop			; (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab8:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <HAL_MspInit+0x24>)
 8000aba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_MspInit+0x24>)
 8000abe:	2101      	movs	r1, #1
 8000ac0:	430a      	orrs	r2, r1
 8000ac2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac4:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <HAL_MspInit+0x24>)
 8000ac6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ac8:	4b03      	ldr	r3, [pc, #12]	; (8000ad8 <HAL_MspInit+0x24>)
 8000aca:	2180      	movs	r1, #128	; 0x80
 8000acc:	0549      	lsls	r1, r1, #21
 8000ace:	430a      	orrs	r2, r1
 8000ad0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40021000 	.word	0x40021000

08000adc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000adc:	b590      	push	{r4, r7, lr}
 8000ade:	b089      	sub	sp, #36	; 0x24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	230c      	movs	r3, #12
 8000ae6:	18fb      	adds	r3, r7, r3
 8000ae8:	0018      	movs	r0, r3
 8000aea:	2314      	movs	r3, #20
 8000aec:	001a      	movs	r2, r3
 8000aee:	2100      	movs	r1, #0
 8000af0:	f002 f9ac 	bl	8002e4c <memset>
  if(huart->Instance==USART2)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a28      	ldr	r2, [pc, #160]	; (8000b9c <HAL_UART_MspInit+0xc0>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d14a      	bne.n	8000b94 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000afe:	4b28      	ldr	r3, [pc, #160]	; (8000ba0 <HAL_UART_MspInit+0xc4>)
 8000b00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b02:	4b27      	ldr	r3, [pc, #156]	; (8000ba0 <HAL_UART_MspInit+0xc4>)
 8000b04:	2180      	movs	r1, #128	; 0x80
 8000b06:	0289      	lsls	r1, r1, #10
 8000b08:	430a      	orrs	r2, r1
 8000b0a:	639a      	str	r2, [r3, #56]	; 0x38
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0c:	4b24      	ldr	r3, [pc, #144]	; (8000ba0 <HAL_UART_MspInit+0xc4>)
 8000b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b10:	4b23      	ldr	r3, [pc, #140]	; (8000ba0 <HAL_UART_MspInit+0xc4>)
 8000b12:	2101      	movs	r1, #1
 8000b14:	430a      	orrs	r2, r1
 8000b16:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b18:	4b21      	ldr	r3, [pc, #132]	; (8000ba0 <HAL_UART_MspInit+0xc4>)
 8000b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	4013      	ands	r3, r2
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA0-CK_IN     ------> USART2_RX
    PA9     ------> USART2_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b24:	210c      	movs	r1, #12
 8000b26:	187b      	adds	r3, r7, r1
 8000b28:	2201      	movs	r2, #1
 8000b2a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2c:	187b      	adds	r3, r7, r1
 8000b2e:	2202      	movs	r2, #2
 8000b30:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	187b      	adds	r3, r7, r1
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b38:	187b      	adds	r3, r7, r1
 8000b3a:	2203      	movs	r2, #3
 8000b3c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 8000b3e:	187b      	adds	r3, r7, r1
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b44:	000c      	movs	r4, r1
 8000b46:	187a      	adds	r2, r7, r1
 8000b48:	23a0      	movs	r3, #160	; 0xa0
 8000b4a:	05db      	lsls	r3, r3, #23
 8000b4c:	0011      	movs	r1, r2
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f000 fa82 	bl	8001058 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b54:	0021      	movs	r1, r4
 8000b56:	187b      	adds	r3, r7, r1
 8000b58:	2280      	movs	r2, #128	; 0x80
 8000b5a:	0092      	lsls	r2, r2, #2
 8000b5c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	187b      	adds	r3, r7, r1
 8000b60:	2202      	movs	r2, #2
 8000b62:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	187b      	adds	r3, r7, r1
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6a:	187b      	adds	r3, r7, r1
 8000b6c:	2203      	movs	r2, #3
 8000b6e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	2204      	movs	r2, #4
 8000b74:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b76:	187a      	adds	r2, r7, r1
 8000b78:	23a0      	movs	r3, #160	; 0xa0
 8000b7a:	05db      	lsls	r3, r3, #23
 8000b7c:	0011      	movs	r1, r2
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f000 fa6a 	bl	8001058 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2100      	movs	r1, #0
 8000b88:	201c      	movs	r0, #28
 8000b8a:	f000 f9eb 	bl	8000f64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b8e:	201c      	movs	r0, #28
 8000b90:	f000 f9fd 	bl	8000f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b94:	46c0      	nop			; (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	b009      	add	sp, #36	; 0x24
 8000b9a:	bd90      	pop	{r4, r7, pc}
 8000b9c:	40004400 	.word	0x40004400
 8000ba0:	40021000 	.word	0x40021000

08000ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ba8:	46c0      	nop			; (mov r8, r8)
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <HardFault_Handler+0x4>

08000bb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bb8:	46c0      	nop			; (mov r8, r8)
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bcc:	f000 f8e4 	bl	8000d98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd0:	46c0      	nop			; (mov r8, r8)
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bdc:	4b03      	ldr	r3, [pc, #12]	; (8000bec <USART2_IRQHandler+0x14>)
 8000bde:	0018      	movs	r0, r3
 8000be0:	f001 fb62 	bl	80022a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000be4:	46c0      	nop			; (mov r8, r8)
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	20000028 	.word	0x20000028

08000bf0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000bf4:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <SystemInit+0x64>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <SystemInit+0x64>)
 8000bfa:	2180      	movs	r1, #128	; 0x80
 8000bfc:	0049      	lsls	r1, r1, #1
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8000c02:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <SystemInit+0x64>)
 8000c04:	68da      	ldr	r2, [r3, #12]
 8000c06:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <SystemInit+0x64>)
 8000c08:	4913      	ldr	r1, [pc, #76]	; (8000c58 <SystemInit+0x68>)
 8000c0a:	400a      	ands	r2, r1
 8000c0c:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000c0e:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <SystemInit+0x64>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <SystemInit+0x64>)
 8000c14:	4911      	ldr	r1, [pc, #68]	; (8000c5c <SystemInit+0x6c>)
 8000c16:	400a      	ands	r2, r1
 8000c18:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <SystemInit+0x64>)
 8000c1c:	689a      	ldr	r2, [r3, #8]
 8000c1e:	4b0d      	ldr	r3, [pc, #52]	; (8000c54 <SystemInit+0x64>)
 8000c20:	2101      	movs	r1, #1
 8000c22:	438a      	bics	r2, r1
 8000c24:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <SystemInit+0x64>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <SystemInit+0x64>)
 8000c2c:	490c      	ldr	r1, [pc, #48]	; (8000c60 <SystemInit+0x70>)
 8000c2e:	400a      	ands	r2, r1
 8000c30:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8000c32:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <SystemInit+0x64>)
 8000c34:	68da      	ldr	r2, [r3, #12]
 8000c36:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <SystemInit+0x64>)
 8000c38:	490a      	ldr	r1, [pc, #40]	; (8000c64 <SystemInit+0x74>)
 8000c3a:	400a      	ands	r2, r1
 8000c3c:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c3e:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <SystemInit+0x64>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c44:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <SystemInit+0x78>)
 8000c46:	2280      	movs	r2, #128	; 0x80
 8000c48:	0512      	lsls	r2, r2, #20
 8000c4a:	609a      	str	r2, [r3, #8]
#endif
}
 8000c4c:	46c0      	nop			; (mov r8, r8)
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	40021000 	.word	0x40021000
 8000c58:	88ff400c 	.word	0x88ff400c
 8000c5c:	fef6fff6 	.word	0xfef6fff6
 8000c60:	fffbffff 	.word	0xfffbffff
 8000c64:	ff02ffff 	.word	0xff02ffff
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000c6c:	4813      	ldr	r0, [pc, #76]	; (8000cbc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000c6e:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000c70:	4813      	ldr	r0, [pc, #76]	; (8000cc0 <LoopForever+0x6>)
    LDR R1, [R0]
 8000c72:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000c74:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000c76:	4a13      	ldr	r2, [pc, #76]	; (8000cc4 <LoopForever+0xa>)
    CMP R1, R2
 8000c78:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000c7a:	d105      	bne.n	8000c88 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000c7c:	4812      	ldr	r0, [pc, #72]	; (8000cc8 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000c7e:	4913      	ldr	r1, [pc, #76]	; (8000ccc <LoopForever+0x12>)
    STR R1, [R0]
 8000c80:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000c82:	4813      	ldr	r0, [pc, #76]	; (8000cd0 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000c84:	4913      	ldr	r1, [pc, #76]	; (8000cd4 <LoopForever+0x1a>)
    STR R1, [R0]
 8000c86:	6001      	str	r1, [r0, #0]

08000c88 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000c88:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c8a:	e003      	b.n	8000c94 <LoopCopyDataInit>

08000c8c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c8c:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <LoopForever+0x1e>)
  ldr  r3, [r3, r1]
 8000c8e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c90:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c92:	3104      	adds	r1, #4

08000c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c94:	4811      	ldr	r0, [pc, #68]	; (8000cdc <LoopForever+0x22>)
  ldr  r3, =_edata
 8000c96:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <LoopForever+0x26>)
  adds  r2, r0, r1
 8000c98:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c9a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c9c:	d3f6      	bcc.n	8000c8c <CopyDataInit>
  ldr  r2, =_sbss
 8000c9e:	4a11      	ldr	r2, [pc, #68]	; (8000ce4 <LoopForever+0x2a>)
  b  LoopFillZerobss
 8000ca0:	e002      	b.n	8000ca8 <LoopFillZerobss>

08000ca2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000ca2:	2300      	movs	r3, #0
  str  r3, [r2]
 8000ca4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca6:	3204      	adds	r2, #4

08000ca8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <LoopForever+0x2e>)
  cmp  r2, r3
 8000caa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000cac:	d3f9      	bcc.n	8000ca2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000cae:	f7ff ff9f 	bl	8000bf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cb2:	f002 f8a7 	bl	8002e04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cb6:	f7ff fda2 	bl	80007fe <main>

08000cba <LoopForever>:

LoopForever:
    b LoopForever
 8000cba:	e7fe      	b.n	8000cba <LoopForever>
   ldr   r0, =_estack
 8000cbc:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8000cc0:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000cc4:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000cc8:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000ccc:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000cd0:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000cd4:	00000000 	.word	0x00000000
  ldr  r3, =_sidata
 8000cd8:	08002ef0 	.word	0x08002ef0
  ldr  r0, =_sdata
 8000cdc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ce0:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000ce4:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000ce8:	200000ac 	.word	0x200000ac

08000cec <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cec:	e7fe      	b.n	8000cec <ADC1_COMP_IRQHandler>
	...

08000cf0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cf6:	1dfb      	adds	r3, r7, #7
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000cfc:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <HAL_Init+0x3c>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <HAL_Init+0x3c>)
 8000d02:	2140      	movs	r1, #64	; 0x40
 8000d04:	430a      	orrs	r2, r1
 8000d06:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d08:	2000      	movs	r0, #0
 8000d0a:	f000 f811 	bl	8000d30 <HAL_InitTick>
 8000d0e:	1e03      	subs	r3, r0, #0
 8000d10:	d003      	beq.n	8000d1a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000d12:	1dfb      	adds	r3, r7, #7
 8000d14:	2201      	movs	r2, #1
 8000d16:	701a      	strb	r2, [r3, #0]
 8000d18:	e001      	b.n	8000d1e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d1a:	f7ff fecb 	bl	8000ab4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d1e:	1dfb      	adds	r3, r7, #7
 8000d20:	781b      	ldrb	r3, [r3, #0]
}
 8000d22:	0018      	movs	r0, r3
 8000d24:	46bd      	mov	sp, r7
 8000d26:	b002      	add	sp, #8
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	40022000 	.word	0x40022000

08000d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d30:	b590      	push	{r4, r7, lr}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d38:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <HAL_InitTick+0x5c>)
 8000d3a:	681c      	ldr	r4, [r3, #0]
 8000d3c:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <HAL_InitTick+0x60>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	0019      	movs	r1, r3
 8000d42:	23fa      	movs	r3, #250	; 0xfa
 8000d44:	0098      	lsls	r0, r3, #2
 8000d46:	f7ff f9df 	bl	8000108 <__udivsi3>
 8000d4a:	0003      	movs	r3, r0
 8000d4c:	0019      	movs	r1, r3
 8000d4e:	0020      	movs	r0, r4
 8000d50:	f7ff f9da 	bl	8000108 <__udivsi3>
 8000d54:	0003      	movs	r3, r0
 8000d56:	0018      	movs	r0, r3
 8000d58:	f000 f929 	bl	8000fae <HAL_SYSTICK_Config>
 8000d5c:	1e03      	subs	r3, r0, #0
 8000d5e:	d001      	beq.n	8000d64 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d60:	2301      	movs	r3, #1
 8000d62:	e00f      	b.n	8000d84 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2b03      	cmp	r3, #3
 8000d68:	d80b      	bhi.n	8000d82 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d6a:	6879      	ldr	r1, [r7, #4]
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	425b      	negs	r3, r3
 8000d70:	2200      	movs	r2, #0
 8000d72:	0018      	movs	r0, r3
 8000d74:	f000 f8f6 	bl	8000f64 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_InitTick+0x64>)
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	e000      	b.n	8000d84 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
}
 8000d84:	0018      	movs	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	b003      	add	sp, #12
 8000d8a:	bd90      	pop	{r4, r7, pc}
 8000d8c:	20000000 	.word	0x20000000
 8000d90:	20000008 	.word	0x20000008
 8000d94:	20000004 	.word	0x20000004

08000d98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d9c:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <HAL_IncTick+0x1c>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	001a      	movs	r2, r3
 8000da2:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <HAL_IncTick+0x20>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	18d2      	adds	r2, r2, r3
 8000da8:	4b03      	ldr	r3, [pc, #12]	; (8000db8 <HAL_IncTick+0x20>)
 8000daa:	601a      	str	r2, [r3, #0]
}
 8000dac:	46c0      	nop			; (mov r8, r8)
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	46c0      	nop			; (mov r8, r8)
 8000db4:	20000008 	.word	0x20000008
 8000db8:	200000a8 	.word	0x200000a8

08000dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc0:	4b02      	ldr	r3, [pc, #8]	; (8000dcc <HAL_GetTick+0x10>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
}
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	200000a8 	.word	0x200000a8

08000dd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dd8:	f7ff fff0 	bl	8000dbc <HAL_GetTick>
 8000ddc:	0003      	movs	r3, r0
 8000dde:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	3301      	adds	r3, #1
 8000de8:	d005      	beq.n	8000df6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <HAL_Delay+0x40>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	001a      	movs	r2, r3
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	189b      	adds	r3, r3, r2
 8000df4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000df6:	46c0      	nop			; (mov r8, r8)
 8000df8:	f7ff ffe0 	bl	8000dbc <HAL_GetTick>
 8000dfc:	0002      	movs	r2, r0
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d8f7      	bhi.n	8000df8 <HAL_Delay+0x28>
  {
  }
}
 8000e08:	46c0      	nop			; (mov r8, r8)
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	b004      	add	sp, #16
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20000008 	.word	0x20000008

08000e14 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	0002      	movs	r2, r0
 8000e1c:	1dfb      	adds	r3, r7, #7
 8000e1e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000e20:	1dfb      	adds	r3, r7, #7
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	001a      	movs	r2, r3
 8000e26:	231f      	movs	r3, #31
 8000e28:	401a      	ands	r2, r3
 8000e2a:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <NVIC_EnableIRQ+0x28>)
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	4091      	lsls	r1, r2
 8000e30:	000a      	movs	r2, r1
 8000e32:	601a      	str	r2, [r3, #0]
}
 8000e34:	46c0      	nop			; (mov r8, r8)
 8000e36:	46bd      	mov	sp, r7
 8000e38:	b002      	add	sp, #8
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	e000e100 	.word	0xe000e100

08000e40 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e40:	b590      	push	{r4, r7, lr}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	0002      	movs	r2, r0
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	1dfb      	adds	r3, r7, #7
 8000e4c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000e4e:	1dfb      	adds	r3, r7, #7
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	2b7f      	cmp	r3, #127	; 0x7f
 8000e54:	d932      	bls.n	8000ebc <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e56:	4a2f      	ldr	r2, [pc, #188]	; (8000f14 <NVIC_SetPriority+0xd4>)
 8000e58:	1dfb      	adds	r3, r7, #7
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	0019      	movs	r1, r3
 8000e5e:	230f      	movs	r3, #15
 8000e60:	400b      	ands	r3, r1
 8000e62:	3b08      	subs	r3, #8
 8000e64:	089b      	lsrs	r3, r3, #2
 8000e66:	3306      	adds	r3, #6
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	18d3      	adds	r3, r2, r3
 8000e6c:	3304      	adds	r3, #4
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	1dfa      	adds	r2, r7, #7
 8000e72:	7812      	ldrb	r2, [r2, #0]
 8000e74:	0011      	movs	r1, r2
 8000e76:	2203      	movs	r2, #3
 8000e78:	400a      	ands	r2, r1
 8000e7a:	00d2      	lsls	r2, r2, #3
 8000e7c:	21ff      	movs	r1, #255	; 0xff
 8000e7e:	4091      	lsls	r1, r2
 8000e80:	000a      	movs	r2, r1
 8000e82:	43d2      	mvns	r2, r2
 8000e84:	401a      	ands	r2, r3
 8000e86:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	019b      	lsls	r3, r3, #6
 8000e8c:	22ff      	movs	r2, #255	; 0xff
 8000e8e:	401a      	ands	r2, r3
 8000e90:	1dfb      	adds	r3, r7, #7
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	0018      	movs	r0, r3
 8000e96:	2303      	movs	r3, #3
 8000e98:	4003      	ands	r3, r0
 8000e9a:	00db      	lsls	r3, r3, #3
 8000e9c:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e9e:	481d      	ldr	r0, [pc, #116]	; (8000f14 <NVIC_SetPriority+0xd4>)
 8000ea0:	1dfb      	adds	r3, r7, #7
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	001c      	movs	r4, r3
 8000ea6:	230f      	movs	r3, #15
 8000ea8:	4023      	ands	r3, r4
 8000eaa:	3b08      	subs	r3, #8
 8000eac:	089b      	lsrs	r3, r3, #2
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	3306      	adds	r3, #6
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	18c3      	adds	r3, r0, r3
 8000eb6:	3304      	adds	r3, #4
 8000eb8:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000eba:	e027      	b.n	8000f0c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ebc:	4a16      	ldr	r2, [pc, #88]	; (8000f18 <NVIC_SetPriority+0xd8>)
 8000ebe:	1dfb      	adds	r3, r7, #7
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	b25b      	sxtb	r3, r3
 8000ec4:	089b      	lsrs	r3, r3, #2
 8000ec6:	33c0      	adds	r3, #192	; 0xc0
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	589b      	ldr	r3, [r3, r2]
 8000ecc:	1dfa      	adds	r2, r7, #7
 8000ece:	7812      	ldrb	r2, [r2, #0]
 8000ed0:	0011      	movs	r1, r2
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	400a      	ands	r2, r1
 8000ed6:	00d2      	lsls	r2, r2, #3
 8000ed8:	21ff      	movs	r1, #255	; 0xff
 8000eda:	4091      	lsls	r1, r2
 8000edc:	000a      	movs	r2, r1
 8000ede:	43d2      	mvns	r2, r2
 8000ee0:	401a      	ands	r2, r3
 8000ee2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	019b      	lsls	r3, r3, #6
 8000ee8:	22ff      	movs	r2, #255	; 0xff
 8000eea:	401a      	ands	r2, r3
 8000eec:	1dfb      	adds	r3, r7, #7
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	4003      	ands	r3, r0
 8000ef6:	00db      	lsls	r3, r3, #3
 8000ef8:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000efa:	4807      	ldr	r0, [pc, #28]	; (8000f18 <NVIC_SetPriority+0xd8>)
 8000efc:	1dfb      	adds	r3, r7, #7
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	b25b      	sxtb	r3, r3
 8000f02:	089b      	lsrs	r3, r3, #2
 8000f04:	430a      	orrs	r2, r1
 8000f06:	33c0      	adds	r3, #192	; 0xc0
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	501a      	str	r2, [r3, r0]
}
 8000f0c:	46c0      	nop			; (mov r8, r8)
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	b003      	add	sp, #12
 8000f12:	bd90      	pop	{r4, r7, pc}
 8000f14:	e000ed00 	.word	0xe000ed00
 8000f18:	e000e100 	.word	0xe000e100

08000f1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	4a0c      	ldr	r2, [pc, #48]	; (8000f5c <SysTick_Config+0x40>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d901      	bls.n	8000f32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e010      	b.n	8000f54 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f32:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <SysTick_Config+0x44>)
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	3a01      	subs	r2, #1
 8000f38:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	425b      	negs	r3, r3
 8000f3e:	2103      	movs	r1, #3
 8000f40:	0018      	movs	r0, r3
 8000f42:	f7ff ff7d 	bl	8000e40 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <SysTick_Config+0x44>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f4c:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <SysTick_Config+0x44>)
 8000f4e:	2207      	movs	r2, #7
 8000f50:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f52:	2300      	movs	r3, #0
}
 8000f54:	0018      	movs	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	b002      	add	sp, #8
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	00ffffff 	.word	0x00ffffff
 8000f60:	e000e010 	.word	0xe000e010

08000f64 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60b9      	str	r1, [r7, #8]
 8000f6c:	607a      	str	r2, [r7, #4]
 8000f6e:	210f      	movs	r1, #15
 8000f70:	187b      	adds	r3, r7, r1
 8000f72:	1c02      	adds	r2, r0, #0
 8000f74:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	187b      	adds	r3, r7, r1
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	b25b      	sxtb	r3, r3
 8000f7e:	0011      	movs	r1, r2
 8000f80:	0018      	movs	r0, r3
 8000f82:	f7ff ff5d 	bl	8000e40 <NVIC_SetPriority>
}
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	b004      	add	sp, #16
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	0002      	movs	r2, r0
 8000f96:	1dfb      	adds	r3, r7, #7
 8000f98:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f9a:	1dfb      	adds	r3, r7, #7
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	b25b      	sxtb	r3, r3
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f7ff ff37 	bl	8000e14 <NVIC_EnableIRQ>
}
 8000fa6:	46c0      	nop			; (mov r8, r8)
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	b002      	add	sp, #8
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	0018      	movs	r0, r3
 8000fba:	f7ff ffaf 	bl	8000f1c <SysTick_Config>
 8000fbe:	0003      	movs	r3, r0
}
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	b002      	add	sp, #8
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fd0:	230f      	movs	r3, #15
 8000fd2:	18fb      	adds	r3, r7, r3
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2225      	movs	r2, #37	; 0x25
 8000fdc:	5c9b      	ldrb	r3, [r3, r2]
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d007      	beq.n	8000ff4 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2204      	movs	r2, #4
 8000fe8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000fea:	230f      	movs	r3, #15
 8000fec:	18fb      	adds	r3, r7, r3
 8000fee:	2201      	movs	r2, #1
 8000ff0:	701a      	strb	r2, [r3, #0]
 8000ff2:	e02a      	b.n	800104a <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	210e      	movs	r1, #14
 8001000:	438a      	bics	r2, r1
 8001002:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2101      	movs	r1, #1
 8001010:	438a      	bics	r2, r1
 8001012:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001018:	221c      	movs	r2, #28
 800101a:	401a      	ands	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001020:	2101      	movs	r1, #1
 8001022:	4091      	lsls	r1, r2
 8001024:	000a      	movs	r2, r1
 8001026:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2225      	movs	r2, #37	; 0x25
 800102c:	2101      	movs	r1, #1
 800102e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2224      	movs	r2, #36	; 0x24
 8001034:	2100      	movs	r1, #0
 8001036:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800103c:	2b00      	cmp	r3, #0
 800103e:	d004      	beq.n	800104a <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	0010      	movs	r0, r2
 8001048:	4798      	blx	r3
    }
  }
  return status;
 800104a:	230f      	movs	r3, #15
 800104c:	18fb      	adds	r3, r7, r3
 800104e:	781b      	ldrb	r3, [r3, #0]
}
 8001050:	0018      	movs	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	b004      	add	sp, #16
 8001056:	bd80      	pop	{r7, pc}

08001058 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800106e:	e143      	b.n	80012f8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2101      	movs	r1, #1
 8001076:	697a      	ldr	r2, [r7, #20]
 8001078:	4091      	lsls	r1, r2
 800107a:	000a      	movs	r2, r1
 800107c:	4013      	ands	r3, r2
 800107e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d100      	bne.n	8001088 <HAL_GPIO_Init+0x30>
 8001086:	e134      	b.n	80012f2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d00b      	beq.n	80010a8 <HAL_GPIO_Init+0x50>
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	2b02      	cmp	r3, #2
 8001096:	d007      	beq.n	80010a8 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800109c:	2b11      	cmp	r3, #17
 800109e:	d003      	beq.n	80010a8 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	2b12      	cmp	r3, #18
 80010a6:	d130      	bne.n	800110a <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	2203      	movs	r2, #3
 80010b4:	409a      	lsls	r2, r3
 80010b6:	0013      	movs	r3, r2
 80010b8:	43da      	mvns	r2, r3
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	4013      	ands	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	68da      	ldr	r2, [r3, #12]
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	409a      	lsls	r2, r3
 80010ca:	0013      	movs	r3, r2
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010de:	2201      	movs	r2, #1
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	409a      	lsls	r2, r3
 80010e4:	0013      	movs	r3, r2
 80010e6:	43da      	mvns	r2, r3
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	091b      	lsrs	r3, r3, #4
 80010f4:	2201      	movs	r2, #1
 80010f6:	401a      	ands	r2, r3
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	409a      	lsls	r2, r3
 80010fc:	0013      	movs	r3, r2
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	2203      	movs	r2, #3
 8001116:	409a      	lsls	r2, r3
 8001118:	0013      	movs	r3, r2
 800111a:	43da      	mvns	r2, r3
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	4013      	ands	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	689a      	ldr	r2, [r3, #8]
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	409a      	lsls	r2, r3
 800112c:	0013      	movs	r3, r2
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	4313      	orrs	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	2b02      	cmp	r3, #2
 8001140:	d003      	beq.n	800114a <HAL_GPIO_Init+0xf2>
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	2b12      	cmp	r3, #18
 8001148:	d123      	bne.n	8001192 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	08da      	lsrs	r2, r3, #3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	3208      	adds	r2, #8
 8001152:	0092      	lsls	r2, r2, #2
 8001154:	58d3      	ldr	r3, [r2, r3]
 8001156:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	2207      	movs	r2, #7
 800115c:	4013      	ands	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	220f      	movs	r2, #15
 8001162:	409a      	lsls	r2, r3
 8001164:	0013      	movs	r3, r2
 8001166:	43da      	mvns	r2, r3
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	4013      	ands	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	691a      	ldr	r2, [r3, #16]
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	2107      	movs	r1, #7
 8001176:	400b      	ands	r3, r1
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	409a      	lsls	r2, r3
 800117c:	0013      	movs	r3, r2
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	4313      	orrs	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	08da      	lsrs	r2, r3, #3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3208      	adds	r2, #8
 800118c:	0092      	lsls	r2, r2, #2
 800118e:	6939      	ldr	r1, [r7, #16]
 8001190:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	2203      	movs	r2, #3
 800119e:	409a      	lsls	r2, r3
 80011a0:	0013      	movs	r3, r2
 80011a2:	43da      	mvns	r2, r3
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	4013      	ands	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	2203      	movs	r2, #3
 80011b0:	401a      	ands	r2, r3
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	409a      	lsls	r2, r3
 80011b8:	0013      	movs	r3, r2
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	4313      	orrs	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685a      	ldr	r2, [r3, #4]
 80011ca:	2380      	movs	r3, #128	; 0x80
 80011cc:	055b      	lsls	r3, r3, #21
 80011ce:	4013      	ands	r3, r2
 80011d0:	d100      	bne.n	80011d4 <HAL_GPIO_Init+0x17c>
 80011d2:	e08e      	b.n	80012f2 <HAL_GPIO_Init+0x29a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d4:	4b4e      	ldr	r3, [pc, #312]	; (8001310 <HAL_GPIO_Init+0x2b8>)
 80011d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011d8:	4b4d      	ldr	r3, [pc, #308]	; (8001310 <HAL_GPIO_Init+0x2b8>)
 80011da:	2101      	movs	r1, #1
 80011dc:	430a      	orrs	r2, r1
 80011de:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80011e0:	4a4c      	ldr	r2, [pc, #304]	; (8001314 <HAL_GPIO_Init+0x2bc>)
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	089b      	lsrs	r3, r3, #2
 80011e6:	3302      	adds	r3, #2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	589b      	ldr	r3, [r3, r2]
 80011ec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	2203      	movs	r2, #3
 80011f2:	4013      	ands	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	220f      	movs	r2, #15
 80011f8:	409a      	lsls	r2, r3
 80011fa:	0013      	movs	r3, r2
 80011fc:	43da      	mvns	r2, r3
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	4013      	ands	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	23a0      	movs	r3, #160	; 0xa0
 8001208:	05db      	lsls	r3, r3, #23
 800120a:	429a      	cmp	r2, r3
 800120c:	d00d      	beq.n	800122a <HAL_GPIO_Init+0x1d2>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a41      	ldr	r2, [pc, #260]	; (8001318 <HAL_GPIO_Init+0x2c0>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d007      	beq.n	8001226 <HAL_GPIO_Init+0x1ce>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a40      	ldr	r2, [pc, #256]	; (800131c <HAL_GPIO_Init+0x2c4>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d101      	bne.n	8001222 <HAL_GPIO_Init+0x1ca>
 800121e:	2302      	movs	r3, #2
 8001220:	e004      	b.n	800122c <HAL_GPIO_Init+0x1d4>
 8001222:	2306      	movs	r3, #6
 8001224:	e002      	b.n	800122c <HAL_GPIO_Init+0x1d4>
 8001226:	2301      	movs	r3, #1
 8001228:	e000      	b.n	800122c <HAL_GPIO_Init+0x1d4>
 800122a:	2300      	movs	r3, #0
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	2103      	movs	r1, #3
 8001230:	400a      	ands	r2, r1
 8001232:	0092      	lsls	r2, r2, #2
 8001234:	4093      	lsls	r3, r2
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800123c:	4935      	ldr	r1, [pc, #212]	; (8001314 <HAL_GPIO_Init+0x2bc>)
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	089b      	lsrs	r3, r3, #2
 8001242:	3302      	adds	r3, #2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800124a:	4b35      	ldr	r3, [pc, #212]	; (8001320 <HAL_GPIO_Init+0x2c8>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	43da      	mvns	r2, r3
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	4013      	ands	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	2380      	movs	r3, #128	; 0x80
 8001260:	025b      	lsls	r3, r3, #9
 8001262:	4013      	ands	r3, r2
 8001264:	d003      	beq.n	800126e <HAL_GPIO_Init+0x216>
        {
          temp |= iocurrent;
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4313      	orrs	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800126e:	4b2c      	ldr	r3, [pc, #176]	; (8001320 <HAL_GPIO_Init+0x2c8>)
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001274:	4b2a      	ldr	r3, [pc, #168]	; (8001320 <HAL_GPIO_Init+0x2c8>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	43da      	mvns	r2, r3
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	4013      	ands	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685a      	ldr	r2, [r3, #4]
 8001288:	2380      	movs	r3, #128	; 0x80
 800128a:	029b      	lsls	r3, r3, #10
 800128c:	4013      	ands	r3, r2
 800128e:	d003      	beq.n	8001298 <HAL_GPIO_Init+0x240>
        {
          temp |= iocurrent;
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	4313      	orrs	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001298:	4b21      	ldr	r3, [pc, #132]	; (8001320 <HAL_GPIO_Init+0x2c8>)
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800129e:	4b20      	ldr	r3, [pc, #128]	; (8001320 <HAL_GPIO_Init+0x2c8>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	43da      	mvns	r2, r3
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685a      	ldr	r2, [r3, #4]
 80012b2:	2380      	movs	r3, #128	; 0x80
 80012b4:	035b      	lsls	r3, r3, #13
 80012b6:	4013      	ands	r3, r2
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	4313      	orrs	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012c2:	4b17      	ldr	r3, [pc, #92]	; (8001320 <HAL_GPIO_Init+0x2c8>)
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80012c8:	4b15      	ldr	r3, [pc, #84]	; (8001320 <HAL_GPIO_Init+0x2c8>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	43da      	mvns	r2, r3
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	4013      	ands	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685a      	ldr	r2, [r3, #4]
 80012dc:	2380      	movs	r3, #128	; 0x80
 80012de:	039b      	lsls	r3, r3, #14
 80012e0:	4013      	ands	r3, r2
 80012e2:	d003      	beq.n	80012ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <HAL_GPIO_Init+0x2c8>)
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	3301      	adds	r3, #1
 80012f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	40da      	lsrs	r2, r3
 8001300:	1e13      	subs	r3, r2, #0
 8001302:	d000      	beq.n	8001306 <HAL_GPIO_Init+0x2ae>
 8001304:	e6b4      	b.n	8001070 <HAL_GPIO_Init+0x18>
  }
}
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	46bd      	mov	sp, r7
 800130a:	b006      	add	sp, #24
 800130c:	bd80      	pop	{r7, pc}
 800130e:	46c0      	nop			; (mov r8, r8)
 8001310:	40021000 	.word	0x40021000
 8001314:	40010000 	.word	0x40010000
 8001318:	50000400 	.word	0x50000400
 800131c:	50000800 	.word	0x50000800
 8001320:	40010400 	.word	0x40010400

08001324 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 800133a:	e0aa      	b.n	8001492 <HAL_GPIO_DeInit+0x16e>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 800133c:	2201      	movs	r2, #1
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	409a      	lsls	r2, r3
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	4013      	ands	r3, r2
 8001346:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d100      	bne.n	8001350 <HAL_GPIO_DeInit+0x2c>
 800134e:	e09d      	b.n	800148c <HAL_GPIO_DeInit+0x168>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8001350:	4a55      	ldr	r2, [pc, #340]	; (80014a8 <HAL_GPIO_DeInit+0x184>)
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	089b      	lsrs	r3, r3, #2
 8001356:	3302      	adds	r3, #2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	589b      	ldr	r3, [r3, r2]
 800135c:	60fb      	str	r3, [r7, #12]
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	2203      	movs	r2, #3
 8001362:	4013      	ands	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	220f      	movs	r2, #15
 8001368:	409a      	lsls	r2, r3
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	4013      	ands	r3, r2
 800136e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	23a0      	movs	r3, #160	; 0xa0
 8001374:	05db      	lsls	r3, r3, #23
 8001376:	429a      	cmp	r2, r3
 8001378:	d00d      	beq.n	8001396 <HAL_GPIO_DeInit+0x72>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a4b      	ldr	r2, [pc, #300]	; (80014ac <HAL_GPIO_DeInit+0x188>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d007      	beq.n	8001392 <HAL_GPIO_DeInit+0x6e>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a4a      	ldr	r2, [pc, #296]	; (80014b0 <HAL_GPIO_DeInit+0x18c>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d101      	bne.n	800138e <HAL_GPIO_DeInit+0x6a>
 800138a:	2302      	movs	r3, #2
 800138c:	e004      	b.n	8001398 <HAL_GPIO_DeInit+0x74>
 800138e:	2306      	movs	r3, #6
 8001390:	e002      	b.n	8001398 <HAL_GPIO_DeInit+0x74>
 8001392:	2301      	movs	r3, #1
 8001394:	e000      	b.n	8001398 <HAL_GPIO_DeInit+0x74>
 8001396:	2300      	movs	r3, #0
 8001398:	697a      	ldr	r2, [r7, #20]
 800139a:	2103      	movs	r1, #3
 800139c:	400a      	ands	r2, r1
 800139e:	0092      	lsls	r2, r2, #2
 80013a0:	4093      	lsls	r3, r2
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d132      	bne.n	800140e <HAL_GPIO_DeInit+0xea>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80013a8:	4b42      	ldr	r3, [pc, #264]	; (80014b4 <HAL_GPIO_DeInit+0x190>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	43d9      	mvns	r1, r3
 80013b0:	4b40      	ldr	r3, [pc, #256]	; (80014b4 <HAL_GPIO_DeInit+0x190>)
 80013b2:	400a      	ands	r2, r1
 80013b4:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80013b6:	4b3f      	ldr	r3, [pc, #252]	; (80014b4 <HAL_GPIO_DeInit+0x190>)
 80013b8:	685a      	ldr	r2, [r3, #4]
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	43d9      	mvns	r1, r3
 80013be:	4b3d      	ldr	r3, [pc, #244]	; (80014b4 <HAL_GPIO_DeInit+0x190>)
 80013c0:	400a      	ands	r2, r1
 80013c2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80013c4:	4b3b      	ldr	r3, [pc, #236]	; (80014b4 <HAL_GPIO_DeInit+0x190>)
 80013c6:	689a      	ldr	r2, [r3, #8]
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	43d9      	mvns	r1, r3
 80013cc:	4b39      	ldr	r3, [pc, #228]	; (80014b4 <HAL_GPIO_DeInit+0x190>)
 80013ce:	400a      	ands	r2, r1
 80013d0:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80013d2:	4b38      	ldr	r3, [pc, #224]	; (80014b4 <HAL_GPIO_DeInit+0x190>)
 80013d4:	68da      	ldr	r2, [r3, #12]
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	43d9      	mvns	r1, r3
 80013da:	4b36      	ldr	r3, [pc, #216]	; (80014b4 <HAL_GPIO_DeInit+0x190>)
 80013dc:	400a      	ands	r2, r1
 80013de:	60da      	str	r2, [r3, #12]
        
        tmp = ((uint32_t)0x0FU) << (4U * (position & 0x03U));
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	2203      	movs	r2, #3
 80013e4:	4013      	ands	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	220f      	movs	r2, #15
 80013ea:	409a      	lsls	r2, r3
 80013ec:	0013      	movs	r3, r2
 80013ee:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80013f0:	4a2d      	ldr	r2, [pc, #180]	; (80014a8 <HAL_GPIO_DeInit+0x184>)
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	089b      	lsrs	r3, r3, #2
 80013f6:	3302      	adds	r3, #2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	589a      	ldr	r2, [r3, r2]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	43d9      	mvns	r1, r3
 8001400:	4829      	ldr	r0, [pc, #164]	; (80014a8 <HAL_GPIO_DeInit+0x184>)
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	089b      	lsrs	r3, r3, #2
 8001406:	400a      	ands	r2, r1
 8001408:	3302      	adds	r3, #2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	2103      	movs	r1, #3
 8001418:	4099      	lsls	r1, r3
 800141a:	000b      	movs	r3, r1
 800141c:	431a      	orrs	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	08da      	lsrs	r2, r3, #3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	3208      	adds	r2, #8
 800142a:	0092      	lsls	r2, r2, #2
 800142c:	58d3      	ldr	r3, [r2, r3]
 800142e:	697a      	ldr	r2, [r7, #20]
 8001430:	2107      	movs	r1, #7
 8001432:	400a      	ands	r2, r1
 8001434:	0092      	lsls	r2, r2, #2
 8001436:	210f      	movs	r1, #15
 8001438:	4091      	lsls	r1, r2
 800143a:	000a      	movs	r2, r1
 800143c:	43d1      	mvns	r1, r2
 800143e:	697a      	ldr	r2, [r7, #20]
 8001440:	08d2      	lsrs	r2, r2, #3
 8001442:	4019      	ands	r1, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3208      	adds	r2, #8
 8001448:	0092      	lsls	r2, r2, #2
 800144a:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	697a      	ldr	r2, [r7, #20]
 8001452:	0052      	lsls	r2, r2, #1
 8001454:	2103      	movs	r1, #3
 8001456:	4091      	lsls	r1, r2
 8001458:	000a      	movs	r2, r1
 800145a:	43d2      	mvns	r2, r2
 800145c:	401a      	ands	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2101      	movs	r1, #1
 8001468:	697a      	ldr	r2, [r7, #20]
 800146a:	4091      	lsls	r1, r2
 800146c:	000a      	movs	r2, r1
 800146e:	43d2      	mvns	r2, r2
 8001470:	401a      	ands	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	697a      	ldr	r2, [r7, #20]
 800147c:	0052      	lsls	r2, r2, #1
 800147e:	2103      	movs	r1, #3
 8001480:	4091      	lsls	r1, r2
 8001482:	000a      	movs	r2, r1
 8001484:	43d2      	mvns	r2, r2
 8001486:	401a      	ands	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	609a      	str	r2, [r3, #8]
    }
    position++;
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	3301      	adds	r3, #1
 8001490:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	40da      	lsrs	r2, r3
 8001498:	1e13      	subs	r3, r2, #0
 800149a:	d000      	beq.n	800149e <HAL_GPIO_DeInit+0x17a>
 800149c:	e74e      	b.n	800133c <HAL_GPIO_DeInit+0x18>
  }
}
 800149e:	46c0      	nop			; (mov r8, r8)
 80014a0:	46bd      	mov	sp, r7
 80014a2:	b006      	add	sp, #24
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	40010000 	.word	0x40010000
 80014ac:	50000400 	.word	0x50000400
 80014b0:	50000800 	.word	0x50000800
 80014b4:	40010400 	.word	0x40010400

080014b8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	0008      	movs	r0, r1
 80014c2:	0011      	movs	r1, r2
 80014c4:	1cbb      	adds	r3, r7, #2
 80014c6:	1c02      	adds	r2, r0, #0
 80014c8:	801a      	strh	r2, [r3, #0]
 80014ca:	1c7b      	adds	r3, r7, #1
 80014cc:	1c0a      	adds	r2, r1, #0
 80014ce:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014d0:	1c7b      	adds	r3, r7, #1
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d004      	beq.n	80014e2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014d8:	1cbb      	adds	r3, r7, #2
 80014da:	881a      	ldrh	r2, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80014e0:	e003      	b.n	80014ea <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80014e2:	1cbb      	adds	r3, r7, #2
 80014e4:	881a      	ldrh	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	46bd      	mov	sp, r7
 80014ee:	b002      	add	sp, #8
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014f4:	b5b0      	push	{r4, r5, r7, lr}
 80014f6:	b08a      	sub	sp, #40	; 0x28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d102      	bne.n	8001508 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	f000 fb6a 	bl	8001bdc <HAL_RCC_OscConfig+0x6e8>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001508:	4bc7      	ldr	r3, [pc, #796]	; (8001828 <HAL_RCC_OscConfig+0x334>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	220c      	movs	r2, #12
 800150e:	4013      	ands	r3, r2
 8001510:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001512:	4bc5      	ldr	r3, [pc, #788]	; (8001828 <HAL_RCC_OscConfig+0x334>)
 8001514:	68da      	ldr	r2, [r3, #12]
 8001516:	2380      	movs	r3, #128	; 0x80
 8001518:	025b      	lsls	r3, r3, #9
 800151a:	4013      	ands	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2201      	movs	r2, #1
 8001524:	4013      	ands	r3, r2
 8001526:	d100      	bne.n	800152a <HAL_RCC_OscConfig+0x36>
 8001528:	e07d      	b.n	8001626 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	2b08      	cmp	r3, #8
 800152e:	d007      	beq.n	8001540 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	2b0c      	cmp	r3, #12
 8001534:	d112      	bne.n	800155c <HAL_RCC_OscConfig+0x68>
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	2380      	movs	r3, #128	; 0x80
 800153a:	025b      	lsls	r3, r3, #9
 800153c:	429a      	cmp	r2, r3
 800153e:	d10d      	bne.n	800155c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001540:	4bb9      	ldr	r3, [pc, #740]	; (8001828 <HAL_RCC_OscConfig+0x334>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	2380      	movs	r3, #128	; 0x80
 8001546:	029b      	lsls	r3, r3, #10
 8001548:	4013      	ands	r3, r2
 800154a:	d100      	bne.n	800154e <HAL_RCC_OscConfig+0x5a>
 800154c:	e06a      	b.n	8001624 <HAL_RCC_OscConfig+0x130>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d166      	bne.n	8001624 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	f000 fb40 	bl	8001bdc <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	2380      	movs	r3, #128	; 0x80
 8001562:	025b      	lsls	r3, r3, #9
 8001564:	429a      	cmp	r2, r3
 8001566:	d107      	bne.n	8001578 <HAL_RCC_OscConfig+0x84>
 8001568:	4baf      	ldr	r3, [pc, #700]	; (8001828 <HAL_RCC_OscConfig+0x334>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4bae      	ldr	r3, [pc, #696]	; (8001828 <HAL_RCC_OscConfig+0x334>)
 800156e:	2180      	movs	r1, #128	; 0x80
 8001570:	0249      	lsls	r1, r1, #9
 8001572:	430a      	orrs	r2, r1
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	e027      	b.n	80015c8 <HAL_RCC_OscConfig+0xd4>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685a      	ldr	r2, [r3, #4]
 800157c:	23a0      	movs	r3, #160	; 0xa0
 800157e:	02db      	lsls	r3, r3, #11
 8001580:	429a      	cmp	r2, r3
 8001582:	d10e      	bne.n	80015a2 <HAL_RCC_OscConfig+0xae>
 8001584:	4ba8      	ldr	r3, [pc, #672]	; (8001828 <HAL_RCC_OscConfig+0x334>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	4ba7      	ldr	r3, [pc, #668]	; (8001828 <HAL_RCC_OscConfig+0x334>)
 800158a:	2180      	movs	r1, #128	; 0x80
 800158c:	02c9      	lsls	r1, r1, #11
 800158e:	430a      	orrs	r2, r1
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	4ba5      	ldr	r3, [pc, #660]	; (8001828 <HAL_RCC_OscConfig+0x334>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	4ba4      	ldr	r3, [pc, #656]	; (8001828 <HAL_RCC_OscConfig+0x334>)
 8001598:	2180      	movs	r1, #128	; 0x80
 800159a:	0249      	lsls	r1, r1, #9
 800159c:	430a      	orrs	r2, r1
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	e012      	b.n	80015c8 <HAL_RCC_OscConfig+0xd4>
 80015a2:	4ba1      	ldr	r3, [pc, #644]	; (8001828 <HAL_RCC_OscConfig+0x334>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	4ba0      	ldr	r3, [pc, #640]	; (8001828 <HAL_RCC_OscConfig+0x334>)
 80015a8:	49a0      	ldr	r1, [pc, #640]	; (800182c <HAL_RCC_OscConfig+0x338>)
 80015aa:	400a      	ands	r2, r1
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	4b9e      	ldr	r3, [pc, #632]	; (8001828 <HAL_RCC_OscConfig+0x334>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	2380      	movs	r3, #128	; 0x80
 80015b4:	025b      	lsls	r3, r3, #9
 80015b6:	4013      	ands	r3, r2
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	4b9a      	ldr	r3, [pc, #616]	; (8001828 <HAL_RCC_OscConfig+0x334>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b99      	ldr	r3, [pc, #612]	; (8001828 <HAL_RCC_OscConfig+0x334>)
 80015c2:	499b      	ldr	r1, [pc, #620]	; (8001830 <HAL_RCC_OscConfig+0x33c>)
 80015c4:	400a      	ands	r2, r1
 80015c6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d014      	beq.n	80015fa <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d0:	f7ff fbf4 	bl	8000dbc <HAL_GetTick>
 80015d4:	0003      	movs	r3, r0
 80015d6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015d8:	e008      	b.n	80015ec <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015da:	f7ff fbef 	bl	8000dbc <HAL_GetTick>
 80015de:	0002      	movs	r2, r0
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b64      	cmp	r3, #100	; 0x64
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e2f7      	b.n	8001bdc <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015ec:	4b8e      	ldr	r3, [pc, #568]	; (8001828 <HAL_RCC_OscConfig+0x334>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	2380      	movs	r3, #128	; 0x80
 80015f2:	029b      	lsls	r3, r3, #10
 80015f4:	4013      	ands	r3, r2
 80015f6:	d0f0      	beq.n	80015da <HAL_RCC_OscConfig+0xe6>
 80015f8:	e015      	b.n	8001626 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fa:	f7ff fbdf 	bl	8000dbc <HAL_GetTick>
 80015fe:	0003      	movs	r3, r0
 8001600:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001604:	f7ff fbda 	bl	8000dbc <HAL_GetTick>
 8001608:	0002      	movs	r2, r0
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b64      	cmp	r3, #100	; 0x64
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e2e2      	b.n	8001bdc <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001616:	4b84      	ldr	r3, [pc, #528]	; (8001828 <HAL_RCC_OscConfig+0x334>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	2380      	movs	r3, #128	; 0x80
 800161c:	029b      	lsls	r3, r3, #10
 800161e:	4013      	ands	r3, r2
 8001620:	d1f0      	bne.n	8001604 <HAL_RCC_OscConfig+0x110>
 8001622:	e000      	b.n	8001626 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001624:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2202      	movs	r2, #2
 800162c:	4013      	ands	r3, r2
 800162e:	d100      	bne.n	8001632 <HAL_RCC_OscConfig+0x13e>
 8001630:	e098      	b.n	8001764 <HAL_RCC_OscConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163a:	2220      	movs	r2, #32
 800163c:	4013      	ands	r3, r2
 800163e:	d009      	beq.n	8001654 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001640:	4b79      	ldr	r3, [pc, #484]	; (8001828 <HAL_RCC_OscConfig+0x334>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4b78      	ldr	r3, [pc, #480]	; (8001828 <HAL_RCC_OscConfig+0x334>)
 8001646:	2120      	movs	r1, #32
 8001648:	430a      	orrs	r2, r1
 800164a:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800164c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164e:	2220      	movs	r2, #32
 8001650:	4393      	bics	r3, r2
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	2b04      	cmp	r3, #4
 8001658:	d005      	beq.n	8001666 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	2b0c      	cmp	r3, #12
 800165e:	d13d      	bne.n	80016dc <HAL_RCC_OscConfig+0x1e8>
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d13a      	bne.n	80016dc <HAL_RCC_OscConfig+0x1e8>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001666:	4b70      	ldr	r3, [pc, #448]	; (8001828 <HAL_RCC_OscConfig+0x334>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2204      	movs	r2, #4
 800166c:	4013      	ands	r3, r2
 800166e:	d004      	beq.n	800167a <HAL_RCC_OscConfig+0x186>
 8001670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e2b0      	b.n	8001bdc <HAL_RCC_OscConfig+0x6e8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800167a:	4b6b      	ldr	r3, [pc, #428]	; (8001828 <HAL_RCC_OscConfig+0x334>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	4a6d      	ldr	r2, [pc, #436]	; (8001834 <HAL_RCC_OscConfig+0x340>)
 8001680:	4013      	ands	r3, r2
 8001682:	0019      	movs	r1, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	691b      	ldr	r3, [r3, #16]
 8001688:	021a      	lsls	r2, r3, #8
 800168a:	4b67      	ldr	r3, [pc, #412]	; (8001828 <HAL_RCC_OscConfig+0x334>)
 800168c:	430a      	orrs	r2, r1
 800168e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001690:	4b65      	ldr	r3, [pc, #404]	; (8001828 <HAL_RCC_OscConfig+0x334>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2209      	movs	r2, #9
 8001696:	4393      	bics	r3, r2
 8001698:	0019      	movs	r1, r3
 800169a:	4b63      	ldr	r3, [pc, #396]	; (8001828 <HAL_RCC_OscConfig+0x334>)
 800169c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800169e:	430a      	orrs	r2, r1
 80016a0:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016a2:	f000 fbcb 	bl	8001e3c <HAL_RCC_GetSysClockFreq>
 80016a6:	0001      	movs	r1, r0
 80016a8:	4b5f      	ldr	r3, [pc, #380]	; (8001828 <HAL_RCC_OscConfig+0x334>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	091b      	lsrs	r3, r3, #4
 80016ae:	220f      	movs	r2, #15
 80016b0:	4013      	ands	r3, r2
 80016b2:	4a61      	ldr	r2, [pc, #388]	; (8001838 <HAL_RCC_OscConfig+0x344>)
 80016b4:	5cd3      	ldrb	r3, [r2, r3]
 80016b6:	000a      	movs	r2, r1
 80016b8:	40da      	lsrs	r2, r3
 80016ba:	4b60      	ldr	r3, [pc, #384]	; (800183c <HAL_RCC_OscConfig+0x348>)
 80016bc:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 80016be:	2513      	movs	r5, #19
 80016c0:	197c      	adds	r4, r7, r5
 80016c2:	2000      	movs	r0, #0
 80016c4:	f7ff fb34 	bl	8000d30 <HAL_InitTick>
 80016c8:	0003      	movs	r3, r0
 80016ca:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80016cc:	197b      	adds	r3, r7, r5
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d047      	beq.n	8001764 <HAL_RCC_OscConfig+0x270>
      {
        return status;
 80016d4:	2313      	movs	r3, #19
 80016d6:	18fb      	adds	r3, r7, r3
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	e27f      	b.n	8001bdc <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80016dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d027      	beq.n	8001732 <HAL_RCC_OscConfig+0x23e>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80016e2:	4b51      	ldr	r3, [pc, #324]	; (8001828 <HAL_RCC_OscConfig+0x334>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2209      	movs	r2, #9
 80016e8:	4393      	bics	r3, r2
 80016ea:	0019      	movs	r1, r3
 80016ec:	4b4e      	ldr	r3, [pc, #312]	; (8001828 <HAL_RCC_OscConfig+0x334>)
 80016ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016f0:	430a      	orrs	r2, r1
 80016f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f4:	f7ff fb62 	bl	8000dbc <HAL_GetTick>
 80016f8:	0003      	movs	r3, r0
 80016fa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016fc:	e008      	b.n	8001710 <HAL_RCC_OscConfig+0x21c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016fe:	f7ff fb5d 	bl	8000dbc <HAL_GetTick>
 8001702:	0002      	movs	r2, r0
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x21c>
          {
            return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e265      	b.n	8001bdc <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001710:	4b45      	ldr	r3, [pc, #276]	; (8001828 <HAL_RCC_OscConfig+0x334>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2204      	movs	r2, #4
 8001716:	4013      	ands	r3, r2
 8001718:	d0f1      	beq.n	80016fe <HAL_RCC_OscConfig+0x20a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800171a:	4b43      	ldr	r3, [pc, #268]	; (8001828 <HAL_RCC_OscConfig+0x334>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	4a45      	ldr	r2, [pc, #276]	; (8001834 <HAL_RCC_OscConfig+0x340>)
 8001720:	4013      	ands	r3, r2
 8001722:	0019      	movs	r1, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	021a      	lsls	r2, r3, #8
 800172a:	4b3f      	ldr	r3, [pc, #252]	; (8001828 <HAL_RCC_OscConfig+0x334>)
 800172c:	430a      	orrs	r2, r1
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	e018      	b.n	8001764 <HAL_RCC_OscConfig+0x270>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001732:	4b3d      	ldr	r3, [pc, #244]	; (8001828 <HAL_RCC_OscConfig+0x334>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	4b3c      	ldr	r3, [pc, #240]	; (8001828 <HAL_RCC_OscConfig+0x334>)
 8001738:	2101      	movs	r1, #1
 800173a:	438a      	bics	r2, r1
 800173c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173e:	f7ff fb3d 	bl	8000dbc <HAL_GetTick>
 8001742:	0003      	movs	r3, r0
 8001744:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x266>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001748:	f7ff fb38 	bl	8000dbc <HAL_GetTick>
 800174c:	0002      	movs	r2, r0
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x266>
          {
            return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e240      	b.n	8001bdc <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800175a:	4b33      	ldr	r3, [pc, #204]	; (8001828 <HAL_RCC_OscConfig+0x334>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2204      	movs	r2, #4
 8001760:	4013      	ands	r3, r2
 8001762:	d1f1      	bne.n	8001748 <HAL_RCC_OscConfig+0x254>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2210      	movs	r2, #16
 800176a:	4013      	ands	r3, r2
 800176c:	d100      	bne.n	8001770 <HAL_RCC_OscConfig+0x27c>
 800176e:	e09e      	b.n	80018ae <HAL_RCC_OscConfig+0x3ba>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d13f      	bne.n	80017f6 <HAL_RCC_OscConfig+0x302>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001776:	4b2c      	ldr	r3, [pc, #176]	; (8001828 <HAL_RCC_OscConfig+0x334>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4013      	ands	r3, r2
 8001780:	d005      	beq.n	800178e <HAL_RCC_OscConfig+0x29a>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_RCC_OscConfig+0x29a>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e226      	b.n	8001bdc <HAL_RCC_OscConfig+0x6e8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800178e:	4b26      	ldr	r3, [pc, #152]	; (8001828 <HAL_RCC_OscConfig+0x334>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	4a2b      	ldr	r2, [pc, #172]	; (8001840 <HAL_RCC_OscConfig+0x34c>)
 8001794:	4013      	ands	r3, r2
 8001796:	0019      	movs	r1, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a1a      	ldr	r2, [r3, #32]
 800179c:	4b22      	ldr	r3, [pc, #136]	; (8001828 <HAL_RCC_OscConfig+0x334>)
 800179e:	430a      	orrs	r2, r1
 80017a0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017a2:	4b21      	ldr	r3, [pc, #132]	; (8001828 <HAL_RCC_OscConfig+0x334>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	021b      	lsls	r3, r3, #8
 80017a8:	0a19      	lsrs	r1, r3, #8
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	061a      	lsls	r2, r3, #24
 80017b0:	4b1d      	ldr	r3, [pc, #116]	; (8001828 <HAL_RCC_OscConfig+0x334>)
 80017b2:	430a      	orrs	r2, r1
 80017b4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a1b      	ldr	r3, [r3, #32]
 80017ba:	0b5b      	lsrs	r3, r3, #13
 80017bc:	3301      	adds	r3, #1
 80017be:	2280      	movs	r2, #128	; 0x80
 80017c0:	0212      	lsls	r2, r2, #8
 80017c2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80017c4:	4b18      	ldr	r3, [pc, #96]	; (8001828 <HAL_RCC_OscConfig+0x334>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	091b      	lsrs	r3, r3, #4
 80017ca:	210f      	movs	r1, #15
 80017cc:	400b      	ands	r3, r1
 80017ce:	491a      	ldr	r1, [pc, #104]	; (8001838 <HAL_RCC_OscConfig+0x344>)
 80017d0:	5ccb      	ldrb	r3, [r1, r3]
 80017d2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80017d4:	4b19      	ldr	r3, [pc, #100]	; (800183c <HAL_RCC_OscConfig+0x348>)
 80017d6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80017d8:	2513      	movs	r5, #19
 80017da:	197c      	adds	r4, r7, r5
 80017dc:	2000      	movs	r0, #0
 80017de:	f7ff faa7 	bl	8000d30 <HAL_InitTick>
 80017e2:	0003      	movs	r3, r0
 80017e4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80017e6:	197b      	adds	r3, r7, r5
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d05f      	beq.n	80018ae <HAL_RCC_OscConfig+0x3ba>
        {
          return status;
 80017ee:	2313      	movs	r3, #19
 80017f0:	18fb      	adds	r3, r7, r3
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	e1f2      	b.n	8001bdc <HAL_RCC_OscConfig+0x6e8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d03d      	beq.n	800187a <HAL_RCC_OscConfig+0x386>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017fe:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <HAL_RCC_OscConfig+0x334>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	4b09      	ldr	r3, [pc, #36]	; (8001828 <HAL_RCC_OscConfig+0x334>)
 8001804:	2180      	movs	r1, #128	; 0x80
 8001806:	0049      	lsls	r1, r1, #1
 8001808:	430a      	orrs	r2, r1
 800180a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180c:	f7ff fad6 	bl	8000dbc <HAL_GetTick>
 8001810:	0003      	movs	r3, r0
 8001812:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001814:	e016      	b.n	8001844 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001816:	f7ff fad1 	bl	8000dbc <HAL_GetTick>
 800181a:	0002      	movs	r2, r0
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d90f      	bls.n	8001844 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e1d9      	b.n	8001bdc <HAL_RCC_OscConfig+0x6e8>
 8001828:	40021000 	.word	0x40021000
 800182c:	fffeffff 	.word	0xfffeffff
 8001830:	fffbffff 	.word	0xfffbffff
 8001834:	ffffe0ff 	.word	0xffffe0ff
 8001838:	08002e74 	.word	0x08002e74
 800183c:	20000000 	.word	0x20000000
 8001840:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001844:	4bca      	ldr	r3, [pc, #808]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	2380      	movs	r3, #128	; 0x80
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4013      	ands	r3, r2
 800184e:	d0e2      	beq.n	8001816 <HAL_RCC_OscConfig+0x322>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001850:	4bc7      	ldr	r3, [pc, #796]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	4ac7      	ldr	r2, [pc, #796]	; (8001b74 <HAL_RCC_OscConfig+0x680>)
 8001856:	4013      	ands	r3, r2
 8001858:	0019      	movs	r1, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a1a      	ldr	r2, [r3, #32]
 800185e:	4bc4      	ldr	r3, [pc, #784]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 8001860:	430a      	orrs	r2, r1
 8001862:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001864:	4bc2      	ldr	r3, [pc, #776]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	021b      	lsls	r3, r3, #8
 800186a:	0a19      	lsrs	r1, r3, #8
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	69db      	ldr	r3, [r3, #28]
 8001870:	061a      	lsls	r2, r3, #24
 8001872:	4bbf      	ldr	r3, [pc, #764]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 8001874:	430a      	orrs	r2, r1
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	e019      	b.n	80018ae <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800187a:	4bbd      	ldr	r3, [pc, #756]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	4bbc      	ldr	r3, [pc, #752]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 8001880:	49bd      	ldr	r1, [pc, #756]	; (8001b78 <HAL_RCC_OscConfig+0x684>)
 8001882:	400a      	ands	r2, r1
 8001884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001886:	f7ff fa99 	bl	8000dbc <HAL_GetTick>
 800188a:	0003      	movs	r3, r0
 800188c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001890:	f7ff fa94 	bl	8000dbc <HAL_GetTick>
 8001894:	0002      	movs	r2, r0
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e19c      	b.n	8001bdc <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80018a2:	4bb3      	ldr	r3, [pc, #716]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	2380      	movs	r3, #128	; 0x80
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4013      	ands	r3, r2
 80018ac:	d1f0      	bne.n	8001890 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2208      	movs	r2, #8
 80018b4:	4013      	ands	r3, r2
 80018b6:	d036      	beq.n	8001926 <HAL_RCC_OscConfig+0x432>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	695b      	ldr	r3, [r3, #20]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d019      	beq.n	80018f4 <HAL_RCC_OscConfig+0x400>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018c0:	4bab      	ldr	r3, [pc, #684]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 80018c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018c4:	4baa      	ldr	r3, [pc, #680]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 80018c6:	2101      	movs	r1, #1
 80018c8:	430a      	orrs	r2, r1
 80018ca:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018cc:	f7ff fa76 	bl	8000dbc <HAL_GetTick>
 80018d0:	0003      	movs	r3, r0
 80018d2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018d6:	f7ff fa71 	bl	8000dbc <HAL_GetTick>
 80018da:	0002      	movs	r2, r0
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e179      	b.n	8001bdc <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018e8:	4ba1      	ldr	r3, [pc, #644]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 80018ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018ec:	2202      	movs	r2, #2
 80018ee:	4013      	ands	r3, r2
 80018f0:	d0f1      	beq.n	80018d6 <HAL_RCC_OscConfig+0x3e2>
 80018f2:	e018      	b.n	8001926 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018f4:	4b9e      	ldr	r3, [pc, #632]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 80018f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018f8:	4b9d      	ldr	r3, [pc, #628]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 80018fa:	2101      	movs	r1, #1
 80018fc:	438a      	bics	r2, r1
 80018fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001900:	f7ff fa5c 	bl	8000dbc <HAL_GetTick>
 8001904:	0003      	movs	r3, r0
 8001906:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800190a:	f7ff fa57 	bl	8000dbc <HAL_GetTick>
 800190e:	0002      	movs	r2, r0
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e15f      	b.n	8001bdc <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800191c:	4b94      	ldr	r3, [pc, #592]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 800191e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001920:	2202      	movs	r2, #2
 8001922:	4013      	ands	r3, r2
 8001924:	d1f1      	bne.n	800190a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2204      	movs	r2, #4
 800192c:	4013      	ands	r3, r2
 800192e:	d100      	bne.n	8001932 <HAL_RCC_OscConfig+0x43e>
 8001930:	e0af      	b.n	8001a92 <HAL_RCC_OscConfig+0x59e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001932:	2323      	movs	r3, #35	; 0x23
 8001934:	18fb      	adds	r3, r7, r3
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800193a:	4b8d      	ldr	r3, [pc, #564]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 800193c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800193e:	2380      	movs	r3, #128	; 0x80
 8001940:	055b      	lsls	r3, r3, #21
 8001942:	4013      	ands	r3, r2
 8001944:	d10a      	bne.n	800195c <HAL_RCC_OscConfig+0x468>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001946:	4b8a      	ldr	r3, [pc, #552]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 8001948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800194a:	4b89      	ldr	r3, [pc, #548]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 800194c:	2180      	movs	r1, #128	; 0x80
 800194e:	0549      	lsls	r1, r1, #21
 8001950:	430a      	orrs	r2, r1
 8001952:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001954:	2323      	movs	r3, #35	; 0x23
 8001956:	18fb      	adds	r3, r7, r3
 8001958:	2201      	movs	r2, #1
 800195a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800195c:	4b87      	ldr	r3, [pc, #540]	; (8001b7c <HAL_RCC_OscConfig+0x688>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	2380      	movs	r3, #128	; 0x80
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	4013      	ands	r3, r2
 8001966:	d11a      	bne.n	800199e <HAL_RCC_OscConfig+0x4aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001968:	4b84      	ldr	r3, [pc, #528]	; (8001b7c <HAL_RCC_OscConfig+0x688>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	4b83      	ldr	r3, [pc, #524]	; (8001b7c <HAL_RCC_OscConfig+0x688>)
 800196e:	2180      	movs	r1, #128	; 0x80
 8001970:	0049      	lsls	r1, r1, #1
 8001972:	430a      	orrs	r2, r1
 8001974:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001976:	f7ff fa21 	bl	8000dbc <HAL_GetTick>
 800197a:	0003      	movs	r3, r0
 800197c:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001980:	f7ff fa1c 	bl	8000dbc <HAL_GetTick>
 8001984:	0002      	movs	r2, r0
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b64      	cmp	r3, #100	; 0x64
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e124      	b.n	8001bdc <HAL_RCC_OscConfig+0x6e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001992:	4b7a      	ldr	r3, [pc, #488]	; (8001b7c <HAL_RCC_OscConfig+0x688>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	2380      	movs	r3, #128	; 0x80
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	4013      	ands	r3, r2
 800199c:	d0f0      	beq.n	8001980 <HAL_RCC_OscConfig+0x48c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689a      	ldr	r2, [r3, #8]
 80019a2:	2380      	movs	r3, #128	; 0x80
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d107      	bne.n	80019ba <HAL_RCC_OscConfig+0x4c6>
 80019aa:	4b71      	ldr	r3, [pc, #452]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 80019ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019ae:	4b70      	ldr	r3, [pc, #448]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 80019b0:	2180      	movs	r1, #128	; 0x80
 80019b2:	0049      	lsls	r1, r1, #1
 80019b4:	430a      	orrs	r2, r1
 80019b6:	651a      	str	r2, [r3, #80]	; 0x50
 80019b8:	e031      	b.n	8001a1e <HAL_RCC_OscConfig+0x52a>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10c      	bne.n	80019dc <HAL_RCC_OscConfig+0x4e8>
 80019c2:	4b6b      	ldr	r3, [pc, #428]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 80019c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019c6:	4b6a      	ldr	r3, [pc, #424]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 80019c8:	496b      	ldr	r1, [pc, #428]	; (8001b78 <HAL_RCC_OscConfig+0x684>)
 80019ca:	400a      	ands	r2, r1
 80019cc:	651a      	str	r2, [r3, #80]	; 0x50
 80019ce:	4b68      	ldr	r3, [pc, #416]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 80019d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019d2:	4b67      	ldr	r3, [pc, #412]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 80019d4:	496a      	ldr	r1, [pc, #424]	; (8001b80 <HAL_RCC_OscConfig+0x68c>)
 80019d6:	400a      	ands	r2, r1
 80019d8:	651a      	str	r2, [r3, #80]	; 0x50
 80019da:	e020      	b.n	8001a1e <HAL_RCC_OscConfig+0x52a>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	23a0      	movs	r3, #160	; 0xa0
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d10e      	bne.n	8001a06 <HAL_RCC_OscConfig+0x512>
 80019e8:	4b61      	ldr	r3, [pc, #388]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 80019ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019ec:	4b60      	ldr	r3, [pc, #384]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 80019ee:	2180      	movs	r1, #128	; 0x80
 80019f0:	00c9      	lsls	r1, r1, #3
 80019f2:	430a      	orrs	r2, r1
 80019f4:	651a      	str	r2, [r3, #80]	; 0x50
 80019f6:	4b5e      	ldr	r3, [pc, #376]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 80019f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019fa:	4b5d      	ldr	r3, [pc, #372]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 80019fc:	2180      	movs	r1, #128	; 0x80
 80019fe:	0049      	lsls	r1, r1, #1
 8001a00:	430a      	orrs	r2, r1
 8001a02:	651a      	str	r2, [r3, #80]	; 0x50
 8001a04:	e00b      	b.n	8001a1e <HAL_RCC_OscConfig+0x52a>
 8001a06:	4b5a      	ldr	r3, [pc, #360]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 8001a08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a0a:	4b59      	ldr	r3, [pc, #356]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 8001a0c:	495a      	ldr	r1, [pc, #360]	; (8001b78 <HAL_RCC_OscConfig+0x684>)
 8001a0e:	400a      	ands	r2, r1
 8001a10:	651a      	str	r2, [r3, #80]	; 0x50
 8001a12:	4b57      	ldr	r3, [pc, #348]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 8001a14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a16:	4b56      	ldr	r3, [pc, #344]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 8001a18:	4959      	ldr	r1, [pc, #356]	; (8001b80 <HAL_RCC_OscConfig+0x68c>)
 8001a1a:	400a      	ands	r2, r1
 8001a1c:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d015      	beq.n	8001a52 <HAL_RCC_OscConfig+0x55e>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a26:	f7ff f9c9 	bl	8000dbc <HAL_GetTick>
 8001a2a:	0003      	movs	r3, r0
 8001a2c:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a2e:	e009      	b.n	8001a44 <HAL_RCC_OscConfig+0x550>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a30:	f7ff f9c4 	bl	8000dbc <HAL_GetTick>
 8001a34:	0002      	movs	r2, r0
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	4a52      	ldr	r2, [pc, #328]	; (8001b84 <HAL_RCC_OscConfig+0x690>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x550>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e0cb      	b.n	8001bdc <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a44:	4b4a      	ldr	r3, [pc, #296]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 8001a46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a48:	2380      	movs	r3, #128	; 0x80
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d0ef      	beq.n	8001a30 <HAL_RCC_OscConfig+0x53c>
 8001a50:	e014      	b.n	8001a7c <HAL_RCC_OscConfig+0x588>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a52:	f7ff f9b3 	bl	8000dbc <HAL_GetTick>
 8001a56:	0003      	movs	r3, r0
 8001a58:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a5a:	e009      	b.n	8001a70 <HAL_RCC_OscConfig+0x57c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a5c:	f7ff f9ae 	bl	8000dbc <HAL_GetTick>
 8001a60:	0002      	movs	r2, r0
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	4a47      	ldr	r2, [pc, #284]	; (8001b84 <HAL_RCC_OscConfig+0x690>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x57c>
        {
          return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e0b5      	b.n	8001bdc <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a70:	4b3f      	ldr	r3, [pc, #252]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 8001a72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a74:	2380      	movs	r3, #128	; 0x80
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d1ef      	bne.n	8001a5c <HAL_RCC_OscConfig+0x568>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a7c:	2323      	movs	r3, #35	; 0x23
 8001a7e:	18fb      	adds	r3, r7, r3
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d105      	bne.n	8001a92 <HAL_RCC_OscConfig+0x59e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a86:	4b3a      	ldr	r3, [pc, #232]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 8001a88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a8a:	4b39      	ldr	r3, [pc, #228]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 8001a8c:	493e      	ldr	r1, [pc, #248]	; (8001b88 <HAL_RCC_OscConfig+0x694>)
 8001a8e:	400a      	ands	r2, r1
 8001a90:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d100      	bne.n	8001a9c <HAL_RCC_OscConfig+0x5a8>
 8001a9a:	e09e      	b.n	8001bda <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	2b0c      	cmp	r3, #12
 8001aa0:	d100      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x5b0>
 8001aa2:	e077      	b.n	8001b94 <HAL_RCC_OscConfig+0x6a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d145      	bne.n	8001b38 <HAL_RCC_OscConfig+0x644>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aac:	4b30      	ldr	r3, [pc, #192]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	4b2f      	ldr	r3, [pc, #188]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 8001ab2:	4936      	ldr	r1, [pc, #216]	; (8001b8c <HAL_RCC_OscConfig+0x698>)
 8001ab4:	400a      	ands	r2, r1
 8001ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab8:	f7ff f980 	bl	8000dbc <HAL_GetTick>
 8001abc:	0003      	movs	r3, r0
 8001abe:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x5e0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac2:	f7ff f97b 	bl	8000dbc <HAL_GetTick>
 8001ac6:	0002      	movs	r2, r0
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e083      	b.n	8001bdc <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ad4:	4b26      	ldr	r3, [pc, #152]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	2380      	movs	r3, #128	; 0x80
 8001ada:	049b      	lsls	r3, r3, #18
 8001adc:	4013      	ands	r3, r2
 8001ade:	d1f0      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ae0:	4b23      	ldr	r3, [pc, #140]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	4a2a      	ldr	r2, [pc, #168]	; (8001b90 <HAL_RCC_OscConfig+0x69c>)
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	0019      	movs	r1, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af8:	431a      	orrs	r2, r3
 8001afa:	4b1d      	ldr	r3, [pc, #116]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 8001afc:	430a      	orrs	r2, r1
 8001afe:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b00:	4b1b      	ldr	r3, [pc, #108]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4b1a      	ldr	r3, [pc, #104]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 8001b06:	2180      	movs	r1, #128	; 0x80
 8001b08:	0449      	lsls	r1, r1, #17
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0e:	f7ff f955 	bl	8000dbc <HAL_GetTick>
 8001b12:	0003      	movs	r3, r0
 8001b14:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b18:	f7ff f950 	bl	8000dbc <HAL_GetTick>
 8001b1c:	0002      	movs	r2, r0
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e058      	b.n	8001bdc <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001b2a:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	2380      	movs	r3, #128	; 0x80
 8001b30:	049b      	lsls	r3, r3, #18
 8001b32:	4013      	ands	r3, r2
 8001b34:	d0f0      	beq.n	8001b18 <HAL_RCC_OscConfig+0x624>
 8001b36:	e050      	b.n	8001bda <HAL_RCC_OscConfig+0x6e6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b38:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 8001b3e:	4913      	ldr	r1, [pc, #76]	; (8001b8c <HAL_RCC_OscConfig+0x698>)
 8001b40:	400a      	ands	r2, r1
 8001b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b44:	f7ff f93a 	bl	8000dbc <HAL_GetTick>
 8001b48:	0003      	movs	r3, r0
 8001b4a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x66c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b4e:	f7ff f935 	bl	8000dbc <HAL_GetTick>
 8001b52:	0002      	movs	r2, r0
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x66c>
          {
            return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e03d      	b.n	8001bdc <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b60:	4b03      	ldr	r3, [pc, #12]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	2380      	movs	r3, #128	; 0x80
 8001b66:	049b      	lsls	r3, r3, #18
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d1f0      	bne.n	8001b4e <HAL_RCC_OscConfig+0x65a>
 8001b6c:	e035      	b.n	8001bda <HAL_RCC_OscConfig+0x6e6>
 8001b6e:	46c0      	nop			; (mov r8, r8)
 8001b70:	40021000 	.word	0x40021000
 8001b74:	ffff1fff 	.word	0xffff1fff
 8001b78:	fffffeff 	.word	0xfffffeff
 8001b7c:	40007000 	.word	0x40007000
 8001b80:	fffffbff 	.word	0xfffffbff
 8001b84:	00001388 	.word	0x00001388
 8001b88:	efffffff 	.word	0xefffffff
 8001b8c:	feffffff 	.word	0xfeffffff
 8001b90:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d101      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x6ac>
      {
        return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e01d      	b.n	8001bdc <HAL_RCC_OscConfig+0x6e8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ba0:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <HAL_RCC_OscConfig+0x6f0>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	2380      	movs	r3, #128	; 0x80
 8001baa:	025b      	lsls	r3, r3, #9
 8001bac:	401a      	ands	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d10f      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	23f0      	movs	r3, #240	; 0xf0
 8001bba:	039b      	lsls	r3, r3, #14
 8001bbc:	401a      	ands	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d107      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	23c0      	movs	r3, #192	; 0xc0
 8001bca:	041b      	lsls	r3, r3, #16
 8001bcc:	401a      	ands	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d001      	beq.n	8001bda <HAL_RCC_OscConfig+0x6e6>
        {
          return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e000      	b.n	8001bdc <HAL_RCC_OscConfig+0x6e8>
        }
      }
    }
  }

  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	0018      	movs	r0, r3
 8001bde:	46bd      	mov	sp, r7
 8001be0:	b00a      	add	sp, #40	; 0x28
 8001be2:	bdb0      	pop	{r4, r5, r7, pc}
 8001be4:	40021000 	.word	0x40021000

08001be8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001be8:	b5b0      	push	{r4, r5, r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e10d      	b.n	8001e18 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bfc:	4b88      	ldr	r3, [pc, #544]	; (8001e20 <HAL_RCC_ClockConfig+0x238>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2201      	movs	r2, #1
 8001c02:	4013      	ands	r3, r2
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d911      	bls.n	8001c2e <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0a:	4b85      	ldr	r3, [pc, #532]	; (8001e20 <HAL_RCC_ClockConfig+0x238>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	4393      	bics	r3, r2
 8001c12:	0019      	movs	r1, r3
 8001c14:	4b82      	ldr	r3, [pc, #520]	; (8001e20 <HAL_RCC_ClockConfig+0x238>)
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1c:	4b80      	ldr	r3, [pc, #512]	; (8001e20 <HAL_RCC_ClockConfig+0x238>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2201      	movs	r2, #1
 8001c22:	4013      	ands	r3, r2
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d001      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e0f4      	b.n	8001e18 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2202      	movs	r2, #2
 8001c34:	4013      	ands	r3, r2
 8001c36:	d009      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c38:	4b7a      	ldr	r3, [pc, #488]	; (8001e24 <HAL_RCC_ClockConfig+0x23c>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	22f0      	movs	r2, #240	; 0xf0
 8001c3e:	4393      	bics	r3, r2
 8001c40:	0019      	movs	r1, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689a      	ldr	r2, [r3, #8]
 8001c46:	4b77      	ldr	r3, [pc, #476]	; (8001e24 <HAL_RCC_ClockConfig+0x23c>)
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2201      	movs	r2, #1
 8001c52:	4013      	ands	r3, r2
 8001c54:	d100      	bne.n	8001c58 <HAL_RCC_ClockConfig+0x70>
 8001c56:	e089      	b.n	8001d6c <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d107      	bne.n	8001c70 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c60:	4b70      	ldr	r3, [pc, #448]	; (8001e24 <HAL_RCC_ClockConfig+0x23c>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	2380      	movs	r3, #128	; 0x80
 8001c66:	029b      	lsls	r3, r3, #10
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d120      	bne.n	8001cae <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e0d3      	b.n	8001e18 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b03      	cmp	r3, #3
 8001c76:	d107      	bne.n	8001c88 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c78:	4b6a      	ldr	r3, [pc, #424]	; (8001e24 <HAL_RCC_ClockConfig+0x23c>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	2380      	movs	r3, #128	; 0x80
 8001c7e:	049b      	lsls	r3, r3, #18
 8001c80:	4013      	ands	r3, r2
 8001c82:	d114      	bne.n	8001cae <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e0c7      	b.n	8001e18 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d106      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c90:	4b64      	ldr	r3, [pc, #400]	; (8001e24 <HAL_RCC_ClockConfig+0x23c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2204      	movs	r2, #4
 8001c96:	4013      	ands	r3, r2
 8001c98:	d109      	bne.n	8001cae <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e0bc      	b.n	8001e18 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c9e:	4b61      	ldr	r3, [pc, #388]	; (8001e24 <HAL_RCC_ClockConfig+0x23c>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	2380      	movs	r3, #128	; 0x80
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	d101      	bne.n	8001cae <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e0b4      	b.n	8001e18 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cae:	4b5d      	ldr	r3, [pc, #372]	; (8001e24 <HAL_RCC_ClockConfig+0x23c>)
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	2203      	movs	r2, #3
 8001cb4:	4393      	bics	r3, r2
 8001cb6:	0019      	movs	r1, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	4b59      	ldr	r3, [pc, #356]	; (8001e24 <HAL_RCC_ClockConfig+0x23c>)
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cc2:	f7ff f87b 	bl	8000dbc <HAL_GetTick>
 8001cc6:	0003      	movs	r3, r0
 8001cc8:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d111      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cd2:	e009      	b.n	8001ce8 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd4:	f7ff f872 	bl	8000dbc <HAL_GetTick>
 8001cd8:	0002      	movs	r2, r0
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	4a52      	ldr	r2, [pc, #328]	; (8001e28 <HAL_RCC_ClockConfig+0x240>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e097      	b.n	8001e18 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ce8:	4b4e      	ldr	r3, [pc, #312]	; (8001e24 <HAL_RCC_ClockConfig+0x23c>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	220c      	movs	r2, #12
 8001cee:	4013      	ands	r3, r2
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	d1ef      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0xec>
 8001cf4:	e03a      	b.n	8001d6c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b03      	cmp	r3, #3
 8001cfc:	d111      	bne.n	8001d22 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cfe:	e009      	b.n	8001d14 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d00:	f7ff f85c 	bl	8000dbc <HAL_GetTick>
 8001d04:	0002      	movs	r2, r0
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	4a47      	ldr	r2, [pc, #284]	; (8001e28 <HAL_RCC_ClockConfig+0x240>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e081      	b.n	8001e18 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d14:	4b43      	ldr	r3, [pc, #268]	; (8001e24 <HAL_RCC_ClockConfig+0x23c>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	220c      	movs	r2, #12
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	2b0c      	cmp	r3, #12
 8001d1e:	d1ef      	bne.n	8001d00 <HAL_RCC_ClockConfig+0x118>
 8001d20:	e024      	b.n	8001d6c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d11b      	bne.n	8001d62 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d2a:	e009      	b.n	8001d40 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d2c:	f7ff f846 	bl	8000dbc <HAL_GetTick>
 8001d30:	0002      	movs	r2, r0
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	4a3c      	ldr	r2, [pc, #240]	; (8001e28 <HAL_RCC_ClockConfig+0x240>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e06b      	b.n	8001e18 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d40:	4b38      	ldr	r3, [pc, #224]	; (8001e24 <HAL_RCC_ClockConfig+0x23c>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	220c      	movs	r2, #12
 8001d46:	4013      	ands	r3, r2
 8001d48:	2b04      	cmp	r3, #4
 8001d4a:	d1ef      	bne.n	8001d2c <HAL_RCC_ClockConfig+0x144>
 8001d4c:	e00e      	b.n	8001d6c <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d4e:	f7ff f835 	bl	8000dbc <HAL_GetTick>
 8001d52:	0002      	movs	r2, r0
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	4a33      	ldr	r2, [pc, #204]	; (8001e28 <HAL_RCC_ClockConfig+0x240>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e05a      	b.n	8001e18 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001d62:	4b30      	ldr	r3, [pc, #192]	; (8001e24 <HAL_RCC_ClockConfig+0x23c>)
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	220c      	movs	r2, #12
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d1f0      	bne.n	8001d4e <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d6c:	4b2c      	ldr	r3, [pc, #176]	; (8001e20 <HAL_RCC_ClockConfig+0x238>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2201      	movs	r2, #1
 8001d72:	4013      	ands	r3, r2
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d211      	bcs.n	8001d9e <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7a:	4b29      	ldr	r3, [pc, #164]	; (8001e20 <HAL_RCC_ClockConfig+0x238>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	4393      	bics	r3, r2
 8001d82:	0019      	movs	r1, r3
 8001d84:	4b26      	ldr	r3, [pc, #152]	; (8001e20 <HAL_RCC_ClockConfig+0x238>)
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8c:	4b24      	ldr	r3, [pc, #144]	; (8001e20 <HAL_RCC_ClockConfig+0x238>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2201      	movs	r2, #1
 8001d92:	4013      	ands	r3, r2
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d001      	beq.n	8001d9e <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e03c      	b.n	8001e18 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2204      	movs	r2, #4
 8001da4:	4013      	ands	r3, r2
 8001da6:	d009      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001da8:	4b1e      	ldr	r3, [pc, #120]	; (8001e24 <HAL_RCC_ClockConfig+0x23c>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	4a1f      	ldr	r2, [pc, #124]	; (8001e2c <HAL_RCC_ClockConfig+0x244>)
 8001dae:	4013      	ands	r3, r2
 8001db0:	0019      	movs	r1, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68da      	ldr	r2, [r3, #12]
 8001db6:	4b1b      	ldr	r3, [pc, #108]	; (8001e24 <HAL_RCC_ClockConfig+0x23c>)
 8001db8:	430a      	orrs	r2, r1
 8001dba:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2208      	movs	r2, #8
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d00a      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dc6:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <HAL_RCC_ClockConfig+0x23c>)
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	4a19      	ldr	r2, [pc, #100]	; (8001e30 <HAL_RCC_ClockConfig+0x248>)
 8001dcc:	4013      	ands	r3, r2
 8001dce:	0019      	movs	r1, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	00da      	lsls	r2, r3, #3
 8001dd6:	4b13      	ldr	r3, [pc, #76]	; (8001e24 <HAL_RCC_ClockConfig+0x23c>)
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ddc:	f000 f82e 	bl	8001e3c <HAL_RCC_GetSysClockFreq>
 8001de0:	0001      	movs	r1, r0
 8001de2:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <HAL_RCC_ClockConfig+0x23c>)
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	091b      	lsrs	r3, r3, #4
 8001de8:	220f      	movs	r2, #15
 8001dea:	4013      	ands	r3, r2
 8001dec:	4a11      	ldr	r2, [pc, #68]	; (8001e34 <HAL_RCC_ClockConfig+0x24c>)
 8001dee:	5cd3      	ldrb	r3, [r2, r3]
 8001df0:	000a      	movs	r2, r1
 8001df2:	40da      	lsrs	r2, r3
 8001df4:	4b10      	ldr	r3, [pc, #64]	; (8001e38 <HAL_RCC_ClockConfig+0x250>)
 8001df6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8001df8:	250b      	movs	r5, #11
 8001dfa:	197c      	adds	r4, r7, r5
 8001dfc:	2000      	movs	r0, #0
 8001dfe:	f7fe ff97 	bl	8000d30 <HAL_InitTick>
 8001e02:	0003      	movs	r3, r0
 8001e04:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001e06:	197b      	adds	r3, r7, r5
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8001e0e:	230b      	movs	r3, #11
 8001e10:	18fb      	adds	r3, r7, r3
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	e000      	b.n	8001e18 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	0018      	movs	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	b004      	add	sp, #16
 8001e1e:	bdb0      	pop	{r4, r5, r7, pc}
 8001e20:	40022000 	.word	0x40022000
 8001e24:	40021000 	.word	0x40021000
 8001e28:	00001388 	.word	0x00001388
 8001e2c:	fffff8ff 	.word	0xfffff8ff
 8001e30:	ffffc7ff 	.word	0xffffc7ff
 8001e34:	08002e74 	.word	0x08002e74
 8001e38:	20000000 	.word	0x20000000

08001e3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001e42:	4b3b      	ldr	r3, [pc, #236]	; (8001f30 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	220c      	movs	r2, #12
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	2b08      	cmp	r3, #8
 8001e50:	d00e      	beq.n	8001e70 <HAL_RCC_GetSysClockFreq+0x34>
 8001e52:	2b0c      	cmp	r3, #12
 8001e54:	d00f      	beq.n	8001e76 <HAL_RCC_GetSysClockFreq+0x3a>
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	d157      	bne.n	8001f0a <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001e5a:	4b35      	ldr	r3, [pc, #212]	; (8001f30 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2210      	movs	r2, #16
 8001e60:	4013      	ands	r3, r2
 8001e62:	d002      	beq.n	8001e6a <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001e64:	4b33      	ldr	r3, [pc, #204]	; (8001f34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e66:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001e68:	e05d      	b.n	8001f26 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8001e6a:	4b33      	ldr	r3, [pc, #204]	; (8001f38 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e6c:	613b      	str	r3, [r7, #16]
      break;
 8001e6e:	e05a      	b.n	8001f26 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e70:	4b32      	ldr	r3, [pc, #200]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x100>)
 8001e72:	613b      	str	r3, [r7, #16]
      break;
 8001e74:	e057      	b.n	8001f26 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	0c9b      	lsrs	r3, r3, #18
 8001e7a:	220f      	movs	r2, #15
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	4a30      	ldr	r2, [pc, #192]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e80:	5cd3      	ldrb	r3, [r2, r3]
 8001e82:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	0d9b      	lsrs	r3, r3, #22
 8001e88:	2203      	movs	r2, #3
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e90:	4b27      	ldr	r3, [pc, #156]	; (8001f30 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001e92:	68da      	ldr	r2, [r3, #12]
 8001e94:	2380      	movs	r3, #128	; 0x80
 8001e96:	025b      	lsls	r3, r3, #9
 8001e98:	4013      	ands	r3, r2
 8001e9a:	d00f      	beq.n	8001ebc <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8001e9c:	68b9      	ldr	r1, [r7, #8]
 8001e9e:	000a      	movs	r2, r1
 8001ea0:	0152      	lsls	r2, r2, #5
 8001ea2:	1a52      	subs	r2, r2, r1
 8001ea4:	0193      	lsls	r3, r2, #6
 8001ea6:	1a9b      	subs	r3, r3, r2
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	185b      	adds	r3, r3, r1
 8001eac:	025b      	lsls	r3, r3, #9
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	f7fe f929 	bl	8000108 <__udivsi3>
 8001eb6:	0003      	movs	r3, r0
 8001eb8:	617b      	str	r3, [r7, #20]
 8001eba:	e023      	b.n	8001f04 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001ebc:	4b1c      	ldr	r3, [pc, #112]	; (8001f30 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2210      	movs	r2, #16
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d00f      	beq.n	8001ee6 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8001ec6:	68b9      	ldr	r1, [r7, #8]
 8001ec8:	000a      	movs	r2, r1
 8001eca:	0152      	lsls	r2, r2, #5
 8001ecc:	1a52      	subs	r2, r2, r1
 8001ece:	0193      	lsls	r3, r2, #6
 8001ed0:	1a9b      	subs	r3, r3, r2
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	185b      	adds	r3, r3, r1
 8001ed6:	021b      	lsls	r3, r3, #8
 8001ed8:	6879      	ldr	r1, [r7, #4]
 8001eda:	0018      	movs	r0, r3
 8001edc:	f7fe f914 	bl	8000108 <__udivsi3>
 8001ee0:	0003      	movs	r3, r0
 8001ee2:	617b      	str	r3, [r7, #20]
 8001ee4:	e00e      	b.n	8001f04 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8001ee6:	68b9      	ldr	r1, [r7, #8]
 8001ee8:	000a      	movs	r2, r1
 8001eea:	0152      	lsls	r2, r2, #5
 8001eec:	1a52      	subs	r2, r2, r1
 8001eee:	0193      	lsls	r3, r2, #6
 8001ef0:	1a9b      	subs	r3, r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	185b      	adds	r3, r3, r1
 8001ef6:	029b      	lsls	r3, r3, #10
 8001ef8:	6879      	ldr	r1, [r7, #4]
 8001efa:	0018      	movs	r0, r3
 8001efc:	f7fe f904 	bl	8000108 <__udivsi3>
 8001f00:	0003      	movs	r3, r0
 8001f02:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	613b      	str	r3, [r7, #16]
      break;
 8001f08:	e00d      	b.n	8001f26 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001f0a:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	0b5b      	lsrs	r3, r3, #13
 8001f10:	2207      	movs	r2, #7
 8001f12:	4013      	ands	r3, r2
 8001f14:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	2280      	movs	r2, #128	; 0x80
 8001f1c:	0212      	lsls	r2, r2, #8
 8001f1e:	409a      	lsls	r2, r3
 8001f20:	0013      	movs	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
      break;
 8001f24:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001f26:	693b      	ldr	r3, [r7, #16]
}
 8001f28:	0018      	movs	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	b006      	add	sp, #24
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40021000 	.word	0x40021000
 8001f34:	003d0900 	.word	0x003d0900
 8001f38:	00f42400 	.word	0x00f42400
 8001f3c:	007a1200 	.word	0x007a1200
 8001f40:	08002e8c 	.word	0x08002e8c

08001f44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f48:	4b02      	ldr	r3, [pc, #8]	; (8001f54 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
}
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	46c0      	nop			; (mov r8, r8)
 8001f54:	20000000 	.word	0x20000000

08001f58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f5c:	f7ff fff2 	bl	8001f44 <HAL_RCC_GetHCLKFreq>
 8001f60:	0001      	movs	r1, r0
 8001f62:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	0a1b      	lsrs	r3, r3, #8
 8001f68:	2207      	movs	r2, #7
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	4a04      	ldr	r2, [pc, #16]	; (8001f80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f6e:	5cd3      	ldrb	r3, [r2, r3]
 8001f70:	40d9      	lsrs	r1, r3
 8001f72:	000b      	movs	r3, r1
}
 8001f74:	0018      	movs	r0, r3
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	46c0      	nop			; (mov r8, r8)
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	08002e84 	.word	0x08002e84

08001f84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f88:	f7ff ffdc 	bl	8001f44 <HAL_RCC_GetHCLKFreq>
 8001f8c:	0001      	movs	r1, r0
 8001f8e:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	0adb      	lsrs	r3, r3, #11
 8001f94:	2207      	movs	r2, #7
 8001f96:	4013      	ands	r3, r2
 8001f98:	4a04      	ldr	r2, [pc, #16]	; (8001fac <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f9a:	5cd3      	ldrb	r3, [r2, r3]
 8001f9c:	40d9      	lsrs	r1, r3
 8001f9e:	000b      	movs	r3, r1
}
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	46c0      	nop			; (mov r8, r8)
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	08002e84 	.word	0x08002e84

08001fb0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2220      	movs	r2, #32
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d100      	bne.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x14>
 8001fc2:	e0c7      	b.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8001fc4:	2317      	movs	r3, #23
 8001fc6:	18fb      	adds	r3, r7, r3
 8001fc8:	2200      	movs	r2, #0
 8001fca:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fcc:	4b82      	ldr	r3, [pc, #520]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001fce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fd0:	2380      	movs	r3, #128	; 0x80
 8001fd2:	055b      	lsls	r3, r3, #21
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d10a      	bne.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fd8:	4b7f      	ldr	r3, [pc, #508]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001fda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fdc:	4b7e      	ldr	r3, [pc, #504]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001fde:	2180      	movs	r1, #128	; 0x80
 8001fe0:	0549      	lsls	r1, r1, #21
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001fe6:	2317      	movs	r3, #23
 8001fe8:	18fb      	adds	r3, r7, r3
 8001fea:	2201      	movs	r2, #1
 8001fec:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fee:	4b7b      	ldr	r3, [pc, #492]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	2380      	movs	r3, #128	; 0x80
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d11a      	bne.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ffa:	4b78      	ldr	r3, [pc, #480]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	4b77      	ldr	r3, [pc, #476]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002000:	2180      	movs	r1, #128	; 0x80
 8002002:	0049      	lsls	r1, r1, #1
 8002004:	430a      	orrs	r2, r1
 8002006:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002008:	f7fe fed8 	bl	8000dbc <HAL_GetTick>
 800200c:	0003      	movs	r3, r0
 800200e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002010:	e008      	b.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002012:	f7fe fed3 	bl	8000dbc <HAL_GetTick>
 8002016:	0002      	movs	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b64      	cmp	r3, #100	; 0x64
 800201e:	d901      	bls.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e0d4      	b.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x21e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002024:	4b6d      	ldr	r3, [pc, #436]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	2380      	movs	r3, #128	; 0x80
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	4013      	ands	r3, r2
 800202e:	d0f0      	beq.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002030:	4b69      	ldr	r3, [pc, #420]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	23c0      	movs	r3, #192	; 0xc0
 8002036:	039b      	lsls	r3, r3, #14
 8002038:	4013      	ands	r3, r2
 800203a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	23c0      	movs	r3, #192	; 0xc0
 8002042:	039b      	lsls	r3, r3, #14
 8002044:	4013      	ands	r3, r2
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	429a      	cmp	r2, r3
 800204a:	d013      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	23c0      	movs	r3, #192	; 0xc0
 8002052:	029b      	lsls	r3, r3, #10
 8002054:	401a      	ands	r2, r3
 8002056:	23c0      	movs	r3, #192	; 0xc0
 8002058:	029b      	lsls	r3, r3, #10
 800205a:	429a      	cmp	r2, r3
 800205c:	d10a      	bne.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800205e:	4b5e      	ldr	r3, [pc, #376]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	2380      	movs	r3, #128	; 0x80
 8002064:	029b      	lsls	r3, r3, #10
 8002066:	401a      	ands	r2, r3
 8002068:	2380      	movs	r3, #128	; 0x80
 800206a:	029b      	lsls	r3, r3, #10
 800206c:	429a      	cmp	r2, r3
 800206e:	d101      	bne.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e0ac      	b.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x21e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002074:	4b58      	ldr	r3, [pc, #352]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002076:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002078:	23c0      	movs	r3, #192	; 0xc0
 800207a:	029b      	lsls	r3, r3, #10
 800207c:	4013      	ands	r3, r2
 800207e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d03b      	beq.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	23c0      	movs	r3, #192	; 0xc0
 800208c:	029b      	lsls	r3, r3, #10
 800208e:	4013      	ands	r3, r2
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	429a      	cmp	r2, r3
 8002094:	d033      	beq.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2220      	movs	r2, #32
 800209c:	4013      	ands	r3, r2
 800209e:	d02e      	beq.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80020a0:	4b4d      	ldr	r3, [pc, #308]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80020a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020a4:	4a4e      	ldr	r2, [pc, #312]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020a6:	4013      	ands	r3, r2
 80020a8:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020aa:	4b4b      	ldr	r3, [pc, #300]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80020ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020ae:	4b4a      	ldr	r3, [pc, #296]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80020b0:	2180      	movs	r1, #128	; 0x80
 80020b2:	0309      	lsls	r1, r1, #12
 80020b4:	430a      	orrs	r2, r1
 80020b6:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020b8:	4b47      	ldr	r3, [pc, #284]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80020ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020bc:	4b46      	ldr	r3, [pc, #280]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80020be:	4949      	ldr	r1, [pc, #292]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80020c0:	400a      	ands	r2, r1
 80020c2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80020c4:	4b44      	ldr	r3, [pc, #272]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	4013      	ands	r3, r2
 80020d2:	d014      	beq.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d4:	f7fe fe72 	bl	8000dbc <HAL_GetTick>
 80020d8:	0003      	movs	r3, r0
 80020da:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020dc:	e009      	b.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020de:	f7fe fe6d 	bl	8000dbc <HAL_GetTick>
 80020e2:	0002      	movs	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	4a3f      	ldr	r2, [pc, #252]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e06d      	b.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x21e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020f2:	4b39      	ldr	r3, [pc, #228]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80020f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020f6:	2380      	movs	r3, #128	; 0x80
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4013      	ands	r3, r2
 80020fc:	d0ef      	beq.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	23c0      	movs	r3, #192	; 0xc0
 8002104:	029b      	lsls	r3, r3, #10
 8002106:	401a      	ands	r2, r3
 8002108:	23c0      	movs	r3, #192	; 0xc0
 800210a:	029b      	lsls	r3, r3, #10
 800210c:	429a      	cmp	r2, r3
 800210e:	d10c      	bne.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002110:	4b31      	ldr	r3, [pc, #196]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a35      	ldr	r2, [pc, #212]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002116:	4013      	ands	r3, r2
 8002118:	0019      	movs	r1, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685a      	ldr	r2, [r3, #4]
 800211e:	23c0      	movs	r3, #192	; 0xc0
 8002120:	039b      	lsls	r3, r3, #14
 8002122:	401a      	ands	r2, r3
 8002124:	4b2c      	ldr	r3, [pc, #176]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002126:	430a      	orrs	r2, r1
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	4b2b      	ldr	r3, [pc, #172]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800212c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	23c0      	movs	r3, #192	; 0xc0
 8002134:	029b      	lsls	r3, r3, #10
 8002136:	401a      	ands	r2, r3
 8002138:	4b27      	ldr	r3, [pc, #156]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800213a:	430a      	orrs	r2, r1
 800213c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800213e:	2317      	movs	r3, #23
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d105      	bne.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002148:	4b23      	ldr	r3, [pc, #140]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800214a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800214c:	4b22      	ldr	r3, [pc, #136]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800214e:	4928      	ldr	r1, [pc, #160]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002150:	400a      	ands	r2, r1
 8002152:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2202      	movs	r2, #2
 800215a:	4013      	ands	r3, r2
 800215c:	d009      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800215e:	4b1e      	ldr	r3, [pc, #120]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002162:	220c      	movs	r2, #12
 8002164:	4393      	bics	r3, r2
 8002166:	0019      	movs	r1, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	4b1a      	ldr	r3, [pc, #104]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800216e:	430a      	orrs	r2, r1
 8002170:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2204      	movs	r2, #4
 8002178:	4013      	ands	r3, r2
 800217a:	d009      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800217c:	4b16      	ldr	r3, [pc, #88]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800217e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002180:	4a1c      	ldr	r2, [pc, #112]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002182:	4013      	ands	r3, r2
 8002184:	0019      	movs	r1, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	68da      	ldr	r2, [r3, #12]
 800218a:	4b13      	ldr	r3, [pc, #76]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800218c:	430a      	orrs	r2, r1
 800218e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2208      	movs	r2, #8
 8002196:	4013      	ands	r3, r2
 8002198:	d009      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800219a:	4b0f      	ldr	r3, [pc, #60]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800219c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219e:	4a16      	ldr	r2, [pc, #88]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021a0:	4013      	ands	r3, r2
 80021a2:	0019      	movs	r1, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691a      	ldr	r2, [r3, #16]
 80021a8:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80021aa:	430a      	orrs	r2, r1
 80021ac:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2280      	movs	r2, #128	; 0x80
 80021b4:	4013      	ands	r3, r2
 80021b6:	d009      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80021b8:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80021ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021bc:	4a0f      	ldr	r2, [pc, #60]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80021be:	4013      	ands	r3, r2
 80021c0:	0019      	movs	r1, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	695a      	ldr	r2, [r3, #20]
 80021c6:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80021c8:	430a      	orrs	r2, r1
 80021ca:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	0018      	movs	r0, r3
 80021d0:	46bd      	mov	sp, r7
 80021d2:	b006      	add	sp, #24
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	46c0      	nop			; (mov r8, r8)
 80021d8:	40021000 	.word	0x40021000
 80021dc:	40007000 	.word	0x40007000
 80021e0:	fffcffff 	.word	0xfffcffff
 80021e4:	fff7ffff 	.word	0xfff7ffff
 80021e8:	00001388 	.word	0x00001388
 80021ec:	ffcfffff 	.word	0xffcfffff
 80021f0:	efffffff 	.word	0xefffffff
 80021f4:	fffff3ff 	.word	0xfffff3ff
 80021f8:	ffffcfff 	.word	0xffffcfff
 80021fc:	fff3ffff 	.word	0xfff3ffff

08002200 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e044      	b.n	800229c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002216:	2b00      	cmp	r3, #0
 8002218:	d107      	bne.n	800222a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2270      	movs	r2, #112	; 0x70
 800221e:	2100      	movs	r1, #0
 8002220:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	0018      	movs	r0, r3
 8002226:	f7fe fc59 	bl	8000adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2224      	movs	r2, #36	; 0x24
 800222e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2101      	movs	r1, #1
 800223c:	438a      	bics	r2, r1
 800223e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	0018      	movs	r0, r3
 8002244:	f000 f966 	bl	8002514 <UART_SetConfig>
 8002248:	0003      	movs	r3, r0
 800224a:	2b01      	cmp	r3, #1
 800224c:	d101      	bne.n	8002252 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e024      	b.n	800229c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	0018      	movs	r0, r3
 800225e:	f000 fc33 	bl	8002ac8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	490d      	ldr	r1, [pc, #52]	; (80022a4 <HAL_UART_Init+0xa4>)
 800226e:	400a      	ands	r2, r1
 8002270:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	212a      	movs	r1, #42	; 0x2a
 800227e:	438a      	bics	r2, r1
 8002280:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2101      	movs	r1, #1
 800228e:	430a      	orrs	r2, r1
 8002290:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	0018      	movs	r0, r3
 8002296:	f000 fccb 	bl	8002c30 <UART_CheckIdleState>
 800229a:	0003      	movs	r3, r0
}
 800229c:	0018      	movs	r0, r3
 800229e:	46bd      	mov	sp, r7
 80022a0:	b002      	add	sp, #8
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	ffffb7ff 	.word	0xffffb7ff

080022a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b088      	sub	sp, #32
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	220f      	movs	r2, #15
 80022cc:	4013      	ands	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d112      	bne.n	80022fc <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	2220      	movs	r2, #32
 80022da:	4013      	ands	r3, r2
 80022dc:	d00e      	beq.n	80022fc <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	2220      	movs	r2, #32
 80022e2:	4013      	ands	r3, r2
 80022e4:	d00a      	beq.n	80022fc <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d100      	bne.n	80022f0 <HAL_UART_IRQHandler+0x48>
 80022ee:	e0f6      	b.n	80024de <HAL_UART_IRQHandler+0x236>
      {
        huart->RxISR(huart);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	0010      	movs	r0, r2
 80022f8:	4798      	blx	r3
      }
      return;
 80022fa:	e0f0      	b.n	80024de <HAL_UART_IRQHandler+0x236>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d100      	bne.n	8002304 <HAL_UART_IRQHandler+0x5c>
 8002302:	e0b8      	b.n	8002476 <HAL_UART_IRQHandler+0x1ce>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	2201      	movs	r2, #1
 8002308:	4013      	ands	r3, r2
 800230a:	d105      	bne.n	8002318 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	2390      	movs	r3, #144	; 0x90
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	4013      	ands	r3, r2
 8002314:	d100      	bne.n	8002318 <HAL_UART_IRQHandler+0x70>
 8002316:	e0ae      	b.n	8002476 <HAL_UART_IRQHandler+0x1ce>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	2201      	movs	r2, #1
 800231c:	4013      	ands	r3, r2
 800231e:	d00e      	beq.n	800233e <HAL_UART_IRQHandler+0x96>
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	2380      	movs	r3, #128	; 0x80
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	4013      	ands	r3, r2
 8002328:	d009      	beq.n	800233e <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2201      	movs	r2, #1
 8002330:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002336:	2201      	movs	r2, #1
 8002338:	431a      	orrs	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	2202      	movs	r2, #2
 8002342:	4013      	ands	r3, r2
 8002344:	d00d      	beq.n	8002362 <HAL_UART_IRQHandler+0xba>
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	2201      	movs	r2, #1
 800234a:	4013      	ands	r3, r2
 800234c:	d009      	beq.n	8002362 <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2202      	movs	r2, #2
 8002354:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800235a:	2204      	movs	r2, #4
 800235c:	431a      	orrs	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	2204      	movs	r2, #4
 8002366:	4013      	ands	r3, r2
 8002368:	d00d      	beq.n	8002386 <HAL_UART_IRQHandler+0xde>
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	2201      	movs	r2, #1
 800236e:	4013      	ands	r3, r2
 8002370:	d009      	beq.n	8002386 <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2204      	movs	r2, #4
 8002378:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800237e:	2202      	movs	r2, #2
 8002380:	431a      	orrs	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	2208      	movs	r2, #8
 800238a:	4013      	ands	r3, r2
 800238c:	d011      	beq.n	80023b2 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	2220      	movs	r2, #32
 8002392:	4013      	ands	r3, r2
 8002394:	d103      	bne.n	800239e <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	2201      	movs	r2, #1
 800239a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800239c:	d009      	beq.n	80023b2 <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2208      	movs	r2, #8
 80023a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023aa:	2208      	movs	r2, #8
 80023ac:	431a      	orrs	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d100      	bne.n	80023bc <HAL_UART_IRQHandler+0x114>
 80023ba:	e092      	b.n	80024e2 <HAL_UART_IRQHandler+0x23a>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	2220      	movs	r2, #32
 80023c0:	4013      	ands	r3, r2
 80023c2:	d00c      	beq.n	80023de <HAL_UART_IRQHandler+0x136>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	2220      	movs	r2, #32
 80023c8:	4013      	ands	r3, r2
 80023ca:	d008      	beq.n	80023de <HAL_UART_IRQHandler+0x136>
      {
        if (huart->RxISR != NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d004      	beq.n	80023de <HAL_UART_IRQHandler+0x136>
        {
          huart->RxISR(huart);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	0010      	movs	r0, r2
 80023dc:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023e2:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	2240      	movs	r2, #64	; 0x40
 80023ec:	4013      	ands	r3, r2
 80023ee:	2b40      	cmp	r3, #64	; 0x40
 80023f0:	d003      	beq.n	80023fa <HAL_UART_IRQHandler+0x152>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2208      	movs	r2, #8
 80023f6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80023f8:	d033      	beq.n	8002462 <HAL_UART_IRQHandler+0x1ba>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	0018      	movs	r0, r3
 80023fe:	f000 fca7 	bl	8002d50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	2240      	movs	r2, #64	; 0x40
 800240a:	4013      	ands	r3, r2
 800240c:	2b40      	cmp	r3, #64	; 0x40
 800240e:	d123      	bne.n	8002458 <HAL_UART_IRQHandler+0x1b0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689a      	ldr	r2, [r3, #8]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2140      	movs	r1, #64	; 0x40
 800241c:	438a      	bics	r2, r1
 800241e:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002424:	2b00      	cmp	r3, #0
 8002426:	d012      	beq.n	800244e <HAL_UART_IRQHandler+0x1a6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800242c:	4a30      	ldr	r2, [pc, #192]	; (80024f0 <HAL_UART_IRQHandler+0x248>)
 800242e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002434:	0018      	movs	r0, r3
 8002436:	f7fe fdc7 	bl	8000fc8 <HAL_DMA_Abort_IT>
 800243a:	1e03      	subs	r3, r0, #0
 800243c:	d019      	beq.n	8002472 <HAL_UART_IRQHandler+0x1ca>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002442:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002448:	0018      	movs	r0, r3
 800244a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800244c:	e011      	b.n	8002472 <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	0018      	movs	r0, r3
 8002452:	f000 f857 	bl	8002504 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002456:	e00c      	b.n	8002472 <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	0018      	movs	r0, r3
 800245c:	f000 f852 	bl	8002504 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002460:	e007      	b.n	8002472 <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	0018      	movs	r0, r3
 8002466:	f000 f84d 	bl	8002504 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8002470:	e037      	b.n	80024e2 <HAL_UART_IRQHandler+0x23a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002472:	46c0      	nop			; (mov r8, r8)
    return;
 8002474:	e035      	b.n	80024e2 <HAL_UART_IRQHandler+0x23a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002476:	69fa      	ldr	r2, [r7, #28]
 8002478:	2380      	movs	r3, #128	; 0x80
 800247a:	035b      	lsls	r3, r3, #13
 800247c:	4013      	ands	r3, r2
 800247e:	d00e      	beq.n	800249e <HAL_UART_IRQHandler+0x1f6>
 8002480:	697a      	ldr	r2, [r7, #20]
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	03db      	lsls	r3, r3, #15
 8002486:	4013      	ands	r3, r2
 8002488:	d009      	beq.n	800249e <HAL_UART_IRQHandler+0x1f6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2280      	movs	r2, #128	; 0x80
 8002490:	0352      	lsls	r2, r2, #13
 8002492:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	0018      	movs	r0, r3
 8002498:	f000 fcab 	bl	8002df2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800249c:	e024      	b.n	80024e8 <HAL_UART_IRQHandler+0x240>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	2280      	movs	r2, #128	; 0x80
 80024a2:	4013      	ands	r3, r2
 80024a4:	d00d      	beq.n	80024c2 <HAL_UART_IRQHandler+0x21a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	2280      	movs	r2, #128	; 0x80
 80024aa:	4013      	ands	r3, r2
 80024ac:	d009      	beq.n	80024c2 <HAL_UART_IRQHandler+0x21a>
  {
    if (huart->TxISR != NULL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d017      	beq.n	80024e6 <HAL_UART_IRQHandler+0x23e>
    {
      huart->TxISR(huart);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	0010      	movs	r0, r2
 80024be:	4798      	blx	r3
    }
    return;
 80024c0:	e011      	b.n	80024e6 <HAL_UART_IRQHandler+0x23e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	2240      	movs	r2, #64	; 0x40
 80024c6:	4013      	ands	r3, r2
 80024c8:	d00e      	beq.n	80024e8 <HAL_UART_IRQHandler+0x240>
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	2240      	movs	r2, #64	; 0x40
 80024ce:	4013      	ands	r3, r2
 80024d0:	d00a      	beq.n	80024e8 <HAL_UART_IRQHandler+0x240>
  {
    UART_EndTransmit_IT(huart);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	0018      	movs	r0, r3
 80024d6:	f000 fc72 	bl	8002dbe <UART_EndTransmit_IT>
    return;
 80024da:	46c0      	nop			; (mov r8, r8)
 80024dc:	e004      	b.n	80024e8 <HAL_UART_IRQHandler+0x240>
      return;
 80024de:	46c0      	nop			; (mov r8, r8)
 80024e0:	e002      	b.n	80024e8 <HAL_UART_IRQHandler+0x240>
    return;
 80024e2:	46c0      	nop			; (mov r8, r8)
 80024e4:	e000      	b.n	80024e8 <HAL_UART_IRQHandler+0x240>
    return;
 80024e6:	46c0      	nop			; (mov r8, r8)
  }

}
 80024e8:	46bd      	mov	sp, r7
 80024ea:	b008      	add	sp, #32
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	08002d91 	.word	0x08002d91

080024f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80024fc:	46c0      	nop			; (mov r8, r8)
 80024fe:	46bd      	mov	sp, r7
 8002500:	b002      	add	sp, #8
 8002502:	bd80      	pop	{r7, pc}

08002504 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800250c:	46c0      	nop			; (mov r8, r8)
 800250e:	46bd      	mov	sp, r7
 8002510:	b002      	add	sp, #8
 8002512:	bd80      	pop	{r7, pc}

08002514 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002514:	b5b0      	push	{r4, r5, r7, lr}
 8002516:	b08e      	sub	sp, #56	; 0x38
 8002518:	af00      	add	r7, sp, #0
 800251a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800251c:	231b      	movs	r3, #27
 800251e:	2218      	movs	r2, #24
 8002520:	4694      	mov	ip, r2
 8002522:	44bc      	add	ip, r7
 8002524:	4463      	add	r3, ip
 8002526:	2210      	movs	r2, #16
 8002528:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 800252a:	2300      	movs	r3, #0
 800252c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 800252e:	2313      	movs	r3, #19
 8002530:	2218      	movs	r2, #24
 8002532:	4694      	mov	ip, r2
 8002534:	44bc      	add	ip, r7
 8002536:	4463      	add	r3, ip
 8002538:	2200      	movs	r2, #0
 800253a:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800253c:	2300      	movs	r3, #0
 800253e:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	689a      	ldr	r2, [r3, #8]
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	431a      	orrs	r2, r3
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	431a      	orrs	r2, r3
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	4313      	orrs	r3, r2
 8002556:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4ace      	ldr	r2, [pc, #824]	; (8002898 <UART_SetConfig+0x384>)
 8002560:	4013      	ands	r3, r2
 8002562:	0019      	movs	r1, r3
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800256a:	430a      	orrs	r2, r1
 800256c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	4ac9      	ldr	r2, [pc, #804]	; (800289c <UART_SetConfig+0x388>)
 8002576:	4013      	ands	r3, r2
 8002578:	0019      	movs	r1, r3
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	68da      	ldr	r2, [r3, #12]
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	430a      	orrs	r2, r1
 8002584:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4ac3      	ldr	r2, [pc, #780]	; (80028a0 <UART_SetConfig+0x38c>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d004      	beq.n	80025a0 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800259c:	4313      	orrs	r3, r2
 800259e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	4abf      	ldr	r2, [pc, #764]	; (80028a4 <UART_SetConfig+0x390>)
 80025a8:	4013      	ands	r3, r2
 80025aa:	0019      	movs	r1, r3
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025b2:	430a      	orrs	r2, r1
 80025b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4abb      	ldr	r2, [pc, #748]	; (80028a8 <UART_SetConfig+0x394>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d137      	bne.n	8002630 <UART_SetConfig+0x11c>
 80025c0:	4bba      	ldr	r3, [pc, #744]	; (80028ac <UART_SetConfig+0x398>)
 80025c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c4:	220c      	movs	r2, #12
 80025c6:	4013      	ands	r3, r2
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	d018      	beq.n	80025fe <UART_SetConfig+0xea>
 80025cc:	d802      	bhi.n	80025d4 <UART_SetConfig+0xc0>
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d005      	beq.n	80025de <UART_SetConfig+0xca>
 80025d2:	e024      	b.n	800261e <UART_SetConfig+0x10a>
 80025d4:	2b08      	cmp	r3, #8
 80025d6:	d00a      	beq.n	80025ee <UART_SetConfig+0xda>
 80025d8:	2b0c      	cmp	r3, #12
 80025da:	d018      	beq.n	800260e <UART_SetConfig+0xfa>
 80025dc:	e01f      	b.n	800261e <UART_SetConfig+0x10a>
 80025de:	231b      	movs	r3, #27
 80025e0:	2218      	movs	r2, #24
 80025e2:	4694      	mov	ip, r2
 80025e4:	44bc      	add	ip, r7
 80025e6:	4463      	add	r3, ip
 80025e8:	2200      	movs	r2, #0
 80025ea:	701a      	strb	r2, [r3, #0]
 80025ec:	e06e      	b.n	80026cc <UART_SetConfig+0x1b8>
 80025ee:	231b      	movs	r3, #27
 80025f0:	2218      	movs	r2, #24
 80025f2:	4694      	mov	ip, r2
 80025f4:	44bc      	add	ip, r7
 80025f6:	4463      	add	r3, ip
 80025f8:	2202      	movs	r2, #2
 80025fa:	701a      	strb	r2, [r3, #0]
 80025fc:	e066      	b.n	80026cc <UART_SetConfig+0x1b8>
 80025fe:	231b      	movs	r3, #27
 8002600:	2218      	movs	r2, #24
 8002602:	4694      	mov	ip, r2
 8002604:	44bc      	add	ip, r7
 8002606:	4463      	add	r3, ip
 8002608:	2204      	movs	r2, #4
 800260a:	701a      	strb	r2, [r3, #0]
 800260c:	e05e      	b.n	80026cc <UART_SetConfig+0x1b8>
 800260e:	231b      	movs	r3, #27
 8002610:	2218      	movs	r2, #24
 8002612:	4694      	mov	ip, r2
 8002614:	44bc      	add	ip, r7
 8002616:	4463      	add	r3, ip
 8002618:	2208      	movs	r2, #8
 800261a:	701a      	strb	r2, [r3, #0]
 800261c:	e056      	b.n	80026cc <UART_SetConfig+0x1b8>
 800261e:	231b      	movs	r3, #27
 8002620:	2218      	movs	r2, #24
 8002622:	4694      	mov	ip, r2
 8002624:	44bc      	add	ip, r7
 8002626:	4463      	add	r3, ip
 8002628:	2210      	movs	r2, #16
 800262a:	701a      	strb	r2, [r3, #0]
 800262c:	46c0      	nop			; (mov r8, r8)
 800262e:	e04d      	b.n	80026cc <UART_SetConfig+0x1b8>
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a9a      	ldr	r2, [pc, #616]	; (80028a0 <UART_SetConfig+0x38c>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d141      	bne.n	80026be <UART_SetConfig+0x1aa>
 800263a:	4b9c      	ldr	r3, [pc, #624]	; (80028ac <UART_SetConfig+0x398>)
 800263c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800263e:	23c0      	movs	r3, #192	; 0xc0
 8002640:	011b      	lsls	r3, r3, #4
 8002642:	4013      	ands	r3, r2
 8002644:	2280      	movs	r2, #128	; 0x80
 8002646:	00d2      	lsls	r2, r2, #3
 8002648:	4293      	cmp	r3, r2
 800264a:	d01f      	beq.n	800268c <UART_SetConfig+0x178>
 800264c:	2280      	movs	r2, #128	; 0x80
 800264e:	00d2      	lsls	r2, r2, #3
 8002650:	4293      	cmp	r3, r2
 8002652:	d802      	bhi.n	800265a <UART_SetConfig+0x146>
 8002654:	2b00      	cmp	r3, #0
 8002656:	d009      	beq.n	800266c <UART_SetConfig+0x158>
 8002658:	e028      	b.n	80026ac <UART_SetConfig+0x198>
 800265a:	2280      	movs	r2, #128	; 0x80
 800265c:	0112      	lsls	r2, r2, #4
 800265e:	4293      	cmp	r3, r2
 8002660:	d00c      	beq.n	800267c <UART_SetConfig+0x168>
 8002662:	22c0      	movs	r2, #192	; 0xc0
 8002664:	0112      	lsls	r2, r2, #4
 8002666:	4293      	cmp	r3, r2
 8002668:	d018      	beq.n	800269c <UART_SetConfig+0x188>
 800266a:	e01f      	b.n	80026ac <UART_SetConfig+0x198>
 800266c:	231b      	movs	r3, #27
 800266e:	2218      	movs	r2, #24
 8002670:	4694      	mov	ip, r2
 8002672:	44bc      	add	ip, r7
 8002674:	4463      	add	r3, ip
 8002676:	2200      	movs	r2, #0
 8002678:	701a      	strb	r2, [r3, #0]
 800267a:	e027      	b.n	80026cc <UART_SetConfig+0x1b8>
 800267c:	231b      	movs	r3, #27
 800267e:	2218      	movs	r2, #24
 8002680:	4694      	mov	ip, r2
 8002682:	44bc      	add	ip, r7
 8002684:	4463      	add	r3, ip
 8002686:	2202      	movs	r2, #2
 8002688:	701a      	strb	r2, [r3, #0]
 800268a:	e01f      	b.n	80026cc <UART_SetConfig+0x1b8>
 800268c:	231b      	movs	r3, #27
 800268e:	2218      	movs	r2, #24
 8002690:	4694      	mov	ip, r2
 8002692:	44bc      	add	ip, r7
 8002694:	4463      	add	r3, ip
 8002696:	2204      	movs	r2, #4
 8002698:	701a      	strb	r2, [r3, #0]
 800269a:	e017      	b.n	80026cc <UART_SetConfig+0x1b8>
 800269c:	231b      	movs	r3, #27
 800269e:	2218      	movs	r2, #24
 80026a0:	4694      	mov	ip, r2
 80026a2:	44bc      	add	ip, r7
 80026a4:	4463      	add	r3, ip
 80026a6:	2208      	movs	r2, #8
 80026a8:	701a      	strb	r2, [r3, #0]
 80026aa:	e00f      	b.n	80026cc <UART_SetConfig+0x1b8>
 80026ac:	231b      	movs	r3, #27
 80026ae:	2218      	movs	r2, #24
 80026b0:	4694      	mov	ip, r2
 80026b2:	44bc      	add	ip, r7
 80026b4:	4463      	add	r3, ip
 80026b6:	2210      	movs	r2, #16
 80026b8:	701a      	strb	r2, [r3, #0]
 80026ba:	46c0      	nop			; (mov r8, r8)
 80026bc:	e006      	b.n	80026cc <UART_SetConfig+0x1b8>
 80026be:	231b      	movs	r3, #27
 80026c0:	2218      	movs	r2, #24
 80026c2:	4694      	mov	ip, r2
 80026c4:	44bc      	add	ip, r7
 80026c6:	4463      	add	r3, ip
 80026c8:	2210      	movs	r2, #16
 80026ca:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a73      	ldr	r2, [pc, #460]	; (80028a0 <UART_SetConfig+0x38c>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d000      	beq.n	80026d8 <UART_SetConfig+0x1c4>
 80026d6:	e083      	b.n	80027e0 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80026d8:	231b      	movs	r3, #27
 80026da:	2218      	movs	r2, #24
 80026dc:	4694      	mov	ip, r2
 80026de:	44bc      	add	ip, r7
 80026e0:	4463      	add	r3, ip
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d00d      	beq.n	8002704 <UART_SetConfig+0x1f0>
 80026e8:	dc02      	bgt.n	80026f0 <UART_SetConfig+0x1dc>
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d005      	beq.n	80026fa <UART_SetConfig+0x1e6>
 80026ee:	e01d      	b.n	800272c <UART_SetConfig+0x218>
 80026f0:	2b04      	cmp	r3, #4
 80026f2:	d012      	beq.n	800271a <UART_SetConfig+0x206>
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d015      	beq.n	8002724 <UART_SetConfig+0x210>
 80026f8:	e018      	b.n	800272c <UART_SetConfig+0x218>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80026fa:	f7ff fc2d 	bl	8001f58 <HAL_RCC_GetPCLK1Freq>
 80026fe:	0003      	movs	r3, r0
 8002700:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002702:	e01b      	b.n	800273c <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002704:	4b69      	ldr	r3, [pc, #420]	; (80028ac <UART_SetConfig+0x398>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2210      	movs	r2, #16
 800270a:	4013      	ands	r3, r2
 800270c:	d002      	beq.n	8002714 <UART_SetConfig+0x200>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 800270e:	4b68      	ldr	r3, [pc, #416]	; (80028b0 <UART_SetConfig+0x39c>)
 8002710:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 8002712:	e013      	b.n	800273c <UART_SetConfig+0x228>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002714:	4b67      	ldr	r3, [pc, #412]	; (80028b4 <UART_SetConfig+0x3a0>)
 8002716:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002718:	e010      	b.n	800273c <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800271a:	f7ff fb8f 	bl	8001e3c <HAL_RCC_GetSysClockFreq>
 800271e:	0003      	movs	r3, r0
 8002720:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002722:	e00b      	b.n	800273c <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002724:	2380      	movs	r3, #128	; 0x80
 8002726:	021b      	lsls	r3, r3, #8
 8002728:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800272a:	e007      	b.n	800273c <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800272c:	2313      	movs	r3, #19
 800272e:	2218      	movs	r2, #24
 8002730:	4694      	mov	ip, r2
 8002732:	44bc      	add	ip, r7
 8002734:	4463      	add	r3, ip
 8002736:	2201      	movs	r2, #1
 8002738:	701a      	strb	r2, [r3, #0]
        break;
 800273a:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273e:	2b00      	cmp	r3, #0
 8002740:	d100      	bne.n	8002744 <UART_SetConfig+0x230>
 8002742:	e1a7      	b.n	8002a94 <UART_SetConfig+0x580>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	0013      	movs	r3, r2
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	189b      	adds	r3, r3, r2
 800274e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002750:	429a      	cmp	r2, r3
 8002752:	d305      	bcc.n	8002760 <UART_SetConfig+0x24c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800275a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800275c:	429a      	cmp	r2, r3
 800275e:	d907      	bls.n	8002770 <UART_SetConfig+0x25c>
      {
        ret = HAL_ERROR;
 8002760:	2313      	movs	r3, #19
 8002762:	2218      	movs	r2, #24
 8002764:	4694      	mov	ip, r2
 8002766:	44bc      	add	ip, r7
 8002768:	4463      	add	r3, ip
 800276a:	2201      	movs	r2, #1
 800276c:	701a      	strb	r2, [r3, #0]
 800276e:	e191      	b.n	8002a94 <UART_SetConfig+0x580>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	2300      	movs	r3, #0
 8002776:	617b      	str	r3, [r7, #20]
 8002778:	6939      	ldr	r1, [r7, #16]
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	000b      	movs	r3, r1
 800277e:	0e1b      	lsrs	r3, r3, #24
 8002780:	0010      	movs	r0, r2
 8002782:	0205      	lsls	r5, r0, #8
 8002784:	431d      	orrs	r5, r3
 8002786:	000b      	movs	r3, r1
 8002788:	021c      	lsls	r4, r3, #8
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	085b      	lsrs	r3, r3, #1
 8002790:	60bb      	str	r3, [r7, #8]
 8002792:	2300      	movs	r3, #0
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	68b8      	ldr	r0, [r7, #8]
 8002798:	68f9      	ldr	r1, [r7, #12]
 800279a:	1900      	adds	r0, r0, r4
 800279c:	4169      	adcs	r1, r5
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	2300      	movs	r3, #0
 80027a6:	607b      	str	r3, [r7, #4]
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f7fd fd38 	bl	8000220 <__aeabi_uldivmod>
 80027b0:	0003      	movs	r3, r0
 80027b2:	000c      	movs	r4, r1
 80027b4:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80027b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b8:	4a3f      	ldr	r2, [pc, #252]	; (80028b8 <UART_SetConfig+0x3a4>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d908      	bls.n	80027d0 <UART_SetConfig+0x2bc>
 80027be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c0:	4a3e      	ldr	r2, [pc, #248]	; (80028bc <UART_SetConfig+0x3a8>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d804      	bhi.n	80027d0 <UART_SetConfig+0x2bc>
        {
          huart->Instance->BRR = usartdiv;
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027cc:	60da      	str	r2, [r3, #12]
 80027ce:	e161      	b.n	8002a94 <UART_SetConfig+0x580>
        }
        else
        {
          ret = HAL_ERROR;
 80027d0:	2313      	movs	r3, #19
 80027d2:	2218      	movs	r2, #24
 80027d4:	4694      	mov	ip, r2
 80027d6:	44bc      	add	ip, r7
 80027d8:	4463      	add	r3, ip
 80027da:	2201      	movs	r2, #1
 80027dc:	701a      	strb	r2, [r3, #0]
 80027de:	e159      	b.n	8002a94 <UART_SetConfig+0x580>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	69da      	ldr	r2, [r3, #28]
 80027e4:	2380      	movs	r3, #128	; 0x80
 80027e6:	021b      	lsls	r3, r3, #8
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d000      	beq.n	80027ee <UART_SetConfig+0x2da>
 80027ec:	e0c4      	b.n	8002978 <UART_SetConfig+0x464>
  {
    switch (clocksource)
 80027ee:	231b      	movs	r3, #27
 80027f0:	2218      	movs	r2, #24
 80027f2:	4694      	mov	ip, r2
 80027f4:	44bc      	add	ip, r7
 80027f6:	4463      	add	r3, ip
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	2b08      	cmp	r3, #8
 80027fc:	d900      	bls.n	8002800 <UART_SetConfig+0x2ec>
 80027fe:	e087      	b.n	8002910 <UART_SetConfig+0x3fc>
 8002800:	009a      	lsls	r2, r3, #2
 8002802:	4b2f      	ldr	r3, [pc, #188]	; (80028c0 <UART_SetConfig+0x3ac>)
 8002804:	18d3      	adds	r3, r2, r3
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800280a:	f7ff fba5 	bl	8001f58 <HAL_RCC_GetPCLK1Freq>
 800280e:	0003      	movs	r3, r0
 8002810:	005a      	lsls	r2, r3, #1
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	085b      	lsrs	r3, r3, #1
 8002818:	18d2      	adds	r2, r2, r3
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	0019      	movs	r1, r3
 8002820:	0010      	movs	r0, r2
 8002822:	f7fd fc71 	bl	8000108 <__udivsi3>
 8002826:	0003      	movs	r3, r0
 8002828:	b29b      	uxth	r3, r3
 800282a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800282c:	e078      	b.n	8002920 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800282e:	f7ff fba9 	bl	8001f84 <HAL_RCC_GetPCLK2Freq>
 8002832:	0003      	movs	r3, r0
 8002834:	005a      	lsls	r2, r3, #1
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	085b      	lsrs	r3, r3, #1
 800283c:	18d2      	adds	r2, r2, r3
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	0019      	movs	r1, r3
 8002844:	0010      	movs	r0, r2
 8002846:	f7fd fc5f 	bl	8000108 <__udivsi3>
 800284a:	0003      	movs	r3, r0
 800284c:	b29b      	uxth	r3, r3
 800284e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002850:	e066      	b.n	8002920 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002852:	4b16      	ldr	r3, [pc, #88]	; (80028ac <UART_SetConfig+0x398>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2210      	movs	r2, #16
 8002858:	4013      	ands	r3, r2
 800285a:	d00e      	beq.n	800287a <UART_SetConfig+0x366>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	085b      	lsrs	r3, r3, #1
 8002862:	4a18      	ldr	r2, [pc, #96]	; (80028c4 <UART_SetConfig+0x3b0>)
 8002864:	189a      	adds	r2, r3, r2
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	0019      	movs	r1, r3
 800286c:	0010      	movs	r0, r2
 800286e:	f7fd fc4b 	bl	8000108 <__udivsi3>
 8002872:	0003      	movs	r3, r0
 8002874:	b29b      	uxth	r3, r3
 8002876:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8002878:	e052      	b.n	8002920 <UART_SetConfig+0x40c>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	085b      	lsrs	r3, r3, #1
 8002880:	4a11      	ldr	r2, [pc, #68]	; (80028c8 <UART_SetConfig+0x3b4>)
 8002882:	189a      	adds	r2, r3, r2
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	0019      	movs	r1, r3
 800288a:	0010      	movs	r0, r2
 800288c:	f7fd fc3c 	bl	8000108 <__udivsi3>
 8002890:	0003      	movs	r3, r0
 8002892:	b29b      	uxth	r3, r3
 8002894:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002896:	e043      	b.n	8002920 <UART_SetConfig+0x40c>
 8002898:	efff69f3 	.word	0xefff69f3
 800289c:	ffffcfff 	.word	0xffffcfff
 80028a0:	40004800 	.word	0x40004800
 80028a4:	fffff4ff 	.word	0xfffff4ff
 80028a8:	40004400 	.word	0x40004400
 80028ac:	40021000 	.word	0x40021000
 80028b0:	003d0900 	.word	0x003d0900
 80028b4:	00f42400 	.word	0x00f42400
 80028b8:	000002ff 	.word	0x000002ff
 80028bc:	000fffff 	.word	0x000fffff
 80028c0:	08002e98 	.word	0x08002e98
 80028c4:	007a1200 	.word	0x007a1200
 80028c8:	01e84800 	.word	0x01e84800
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80028cc:	f7ff fab6 	bl	8001e3c <HAL_RCC_GetSysClockFreq>
 80028d0:	0003      	movs	r3, r0
 80028d2:	005a      	lsls	r2, r3, #1
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	085b      	lsrs	r3, r3, #1
 80028da:	18d2      	adds	r2, r2, r3
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	0019      	movs	r1, r3
 80028e2:	0010      	movs	r0, r2
 80028e4:	f7fd fc10 	bl	8000108 <__udivsi3>
 80028e8:	0003      	movs	r3, r0
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028ee:	e017      	b.n	8002920 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	085b      	lsrs	r3, r3, #1
 80028f6:	2280      	movs	r2, #128	; 0x80
 80028f8:	0252      	lsls	r2, r2, #9
 80028fa:	189a      	adds	r2, r3, r2
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	0019      	movs	r1, r3
 8002902:	0010      	movs	r0, r2
 8002904:	f7fd fc00 	bl	8000108 <__udivsi3>
 8002908:	0003      	movs	r3, r0
 800290a:	b29b      	uxth	r3, r3
 800290c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800290e:	e007      	b.n	8002920 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002910:	2313      	movs	r3, #19
 8002912:	2218      	movs	r2, #24
 8002914:	4694      	mov	ip, r2
 8002916:	44bc      	add	ip, r7
 8002918:	4463      	add	r3, ip
 800291a:	2201      	movs	r2, #1
 800291c:	701a      	strb	r2, [r3, #0]
        break;
 800291e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002922:	2b0f      	cmp	r3, #15
 8002924:	d920      	bls.n	8002968 <UART_SetConfig+0x454>
 8002926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002928:	4a62      	ldr	r2, [pc, #392]	; (8002ab4 <UART_SetConfig+0x5a0>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d81c      	bhi.n	8002968 <UART_SetConfig+0x454>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800292e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002930:	b29a      	uxth	r2, r3
 8002932:	200a      	movs	r0, #10
 8002934:	2418      	movs	r4, #24
 8002936:	193b      	adds	r3, r7, r4
 8002938:	181b      	adds	r3, r3, r0
 800293a:	210f      	movs	r1, #15
 800293c:	438a      	bics	r2, r1
 800293e:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002942:	085b      	lsrs	r3, r3, #1
 8002944:	b29b      	uxth	r3, r3
 8002946:	2207      	movs	r2, #7
 8002948:	4013      	ands	r3, r2
 800294a:	b299      	uxth	r1, r3
 800294c:	193b      	adds	r3, r7, r4
 800294e:	181b      	adds	r3, r3, r0
 8002950:	193a      	adds	r2, r7, r4
 8002952:	1812      	adds	r2, r2, r0
 8002954:	8812      	ldrh	r2, [r2, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	193a      	adds	r2, r7, r4
 8002960:	1812      	adds	r2, r2, r0
 8002962:	8812      	ldrh	r2, [r2, #0]
 8002964:	60da      	str	r2, [r3, #12]
 8002966:	e095      	b.n	8002a94 <UART_SetConfig+0x580>
    }
    else
    {
      ret = HAL_ERROR;
 8002968:	2313      	movs	r3, #19
 800296a:	2218      	movs	r2, #24
 800296c:	4694      	mov	ip, r2
 800296e:	44bc      	add	ip, r7
 8002970:	4463      	add	r3, ip
 8002972:	2201      	movs	r2, #1
 8002974:	701a      	strb	r2, [r3, #0]
 8002976:	e08d      	b.n	8002a94 <UART_SetConfig+0x580>
    }
  }
  else
  {
    switch (clocksource)
 8002978:	231b      	movs	r3, #27
 800297a:	2218      	movs	r2, #24
 800297c:	4694      	mov	ip, r2
 800297e:	44bc      	add	ip, r7
 8002980:	4463      	add	r3, ip
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b08      	cmp	r3, #8
 8002986:	d86a      	bhi.n	8002a5e <UART_SetConfig+0x54a>
 8002988:	009a      	lsls	r2, r3, #2
 800298a:	4b4b      	ldr	r3, [pc, #300]	; (8002ab8 <UART_SetConfig+0x5a4>)
 800298c:	18d3      	adds	r3, r2, r3
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002992:	f7ff fae1 	bl	8001f58 <HAL_RCC_GetPCLK1Freq>
 8002996:	0002      	movs	r2, r0
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	085b      	lsrs	r3, r3, #1
 800299e:	18d2      	adds	r2, r2, r3
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	0019      	movs	r1, r3
 80029a6:	0010      	movs	r0, r2
 80029a8:	f7fd fbae 	bl	8000108 <__udivsi3>
 80029ac:	0003      	movs	r3, r0
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029b2:	e05c      	b.n	8002a6e <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80029b4:	f7ff fae6 	bl	8001f84 <HAL_RCC_GetPCLK2Freq>
 80029b8:	0002      	movs	r2, r0
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	085b      	lsrs	r3, r3, #1
 80029c0:	18d2      	adds	r2, r2, r3
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	0019      	movs	r1, r3
 80029c8:	0010      	movs	r0, r2
 80029ca:	f7fd fb9d 	bl	8000108 <__udivsi3>
 80029ce:	0003      	movs	r3, r0
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029d4:	e04b      	b.n	8002a6e <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029d6:	4b39      	ldr	r3, [pc, #228]	; (8002abc <UART_SetConfig+0x5a8>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2210      	movs	r2, #16
 80029dc:	4013      	ands	r3, r2
 80029de:	d00e      	beq.n	80029fe <UART_SetConfig+0x4ea>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	085b      	lsrs	r3, r3, #1
 80029e6:	4a36      	ldr	r2, [pc, #216]	; (8002ac0 <UART_SetConfig+0x5ac>)
 80029e8:	189a      	adds	r2, r3, r2
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	0019      	movs	r1, r3
 80029f0:	0010      	movs	r0, r2
 80029f2:	f7fd fb89 	bl	8000108 <__udivsi3>
 80029f6:	0003      	movs	r3, r0
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 80029fc:	e037      	b.n	8002a6e <UART_SetConfig+0x55a>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	085b      	lsrs	r3, r3, #1
 8002a04:	4a2f      	ldr	r2, [pc, #188]	; (8002ac4 <UART_SetConfig+0x5b0>)
 8002a06:	189a      	adds	r2, r3, r2
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	0019      	movs	r1, r3
 8002a0e:	0010      	movs	r0, r2
 8002a10:	f7fd fb7a 	bl	8000108 <__udivsi3>
 8002a14:	0003      	movs	r3, r0
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a1a:	e028      	b.n	8002a6e <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002a1c:	f7ff fa0e 	bl	8001e3c <HAL_RCC_GetSysClockFreq>
 8002a20:	0002      	movs	r2, r0
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	085b      	lsrs	r3, r3, #1
 8002a28:	18d2      	adds	r2, r2, r3
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	0019      	movs	r1, r3
 8002a30:	0010      	movs	r0, r2
 8002a32:	f7fd fb69 	bl	8000108 <__udivsi3>
 8002a36:	0003      	movs	r3, r0
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a3c:	e017      	b.n	8002a6e <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	085b      	lsrs	r3, r3, #1
 8002a44:	2280      	movs	r2, #128	; 0x80
 8002a46:	0212      	lsls	r2, r2, #8
 8002a48:	189a      	adds	r2, r3, r2
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	0019      	movs	r1, r3
 8002a50:	0010      	movs	r0, r2
 8002a52:	f7fd fb59 	bl	8000108 <__udivsi3>
 8002a56:	0003      	movs	r3, r0
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a5c:	e007      	b.n	8002a6e <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002a5e:	2313      	movs	r3, #19
 8002a60:	2218      	movs	r2, #24
 8002a62:	4694      	mov	ip, r2
 8002a64:	44bc      	add	ip, r7
 8002a66:	4463      	add	r3, ip
 8002a68:	2201      	movs	r2, #1
 8002a6a:	701a      	strb	r2, [r3, #0]
        break;
 8002a6c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a70:	2b0f      	cmp	r3, #15
 8002a72:	d908      	bls.n	8002a86 <UART_SetConfig+0x572>
 8002a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a76:	4a0f      	ldr	r2, [pc, #60]	; (8002ab4 <UART_SetConfig+0x5a0>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d804      	bhi.n	8002a86 <UART_SetConfig+0x572>
    {
      huart->Instance->BRR = usartdiv;
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a82:	60da      	str	r2, [r3, #12]
 8002a84:	e006      	b.n	8002a94 <UART_SetConfig+0x580>
    }
    else
    {
      ret = HAL_ERROR;
 8002a86:	2313      	movs	r3, #19
 8002a88:	2218      	movs	r2, #24
 8002a8a:	4694      	mov	ip, r2
 8002a8c:	44bc      	add	ip, r7
 8002a8e:	4463      	add	r3, ip
 8002a90:	2201      	movs	r2, #1
 8002a92:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	2200      	movs	r2, #0
 8002a98:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002aa0:	2313      	movs	r3, #19
 8002aa2:	2218      	movs	r2, #24
 8002aa4:	4694      	mov	ip, r2
 8002aa6:	44bc      	add	ip, r7
 8002aa8:	4463      	add	r3, ip
 8002aaa:	781b      	ldrb	r3, [r3, #0]
}
 8002aac:	0018      	movs	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	b00e      	add	sp, #56	; 0x38
 8002ab2:	bdb0      	pop	{r4, r5, r7, pc}
 8002ab4:	0000ffff 	.word	0x0000ffff
 8002ab8:	08002ebc 	.word	0x08002ebc
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	003d0900 	.word	0x003d0900
 8002ac4:	00f42400 	.word	0x00f42400

08002ac8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	d00b      	beq.n	8002af2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	4a4a      	ldr	r2, [pc, #296]	; (8002c0c <UART_AdvFeatureConfig+0x144>)
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	0019      	movs	r1, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af6:	2202      	movs	r2, #2
 8002af8:	4013      	ands	r3, r2
 8002afa:	d00b      	beq.n	8002b14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	4a43      	ldr	r2, [pc, #268]	; (8002c10 <UART_AdvFeatureConfig+0x148>)
 8002b04:	4013      	ands	r3, r2
 8002b06:	0019      	movs	r1, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	2204      	movs	r2, #4
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	d00b      	beq.n	8002b36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	4a3b      	ldr	r2, [pc, #236]	; (8002c14 <UART_AdvFeatureConfig+0x14c>)
 8002b26:	4013      	ands	r3, r2
 8002b28:	0019      	movs	r1, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	430a      	orrs	r2, r1
 8002b34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3a:	2208      	movs	r2, #8
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	d00b      	beq.n	8002b58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	4a34      	ldr	r2, [pc, #208]	; (8002c18 <UART_AdvFeatureConfig+0x150>)
 8002b48:	4013      	ands	r3, r2
 8002b4a:	0019      	movs	r1, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	430a      	orrs	r2, r1
 8002b56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	2210      	movs	r2, #16
 8002b5e:	4013      	ands	r3, r2
 8002b60:	d00b      	beq.n	8002b7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	4a2c      	ldr	r2, [pc, #176]	; (8002c1c <UART_AdvFeatureConfig+0x154>)
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	0019      	movs	r1, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7e:	2220      	movs	r2, #32
 8002b80:	4013      	ands	r3, r2
 8002b82:	d00b      	beq.n	8002b9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	4a25      	ldr	r2, [pc, #148]	; (8002c20 <UART_AdvFeatureConfig+0x158>)
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	0019      	movs	r1, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	2240      	movs	r2, #64	; 0x40
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	d01d      	beq.n	8002be2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	4a1d      	ldr	r2, [pc, #116]	; (8002c24 <UART_AdvFeatureConfig+0x15c>)
 8002bae:	4013      	ands	r3, r2
 8002bb0:	0019      	movs	r1, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bc2:	2380      	movs	r3, #128	; 0x80
 8002bc4:	035b      	lsls	r3, r3, #13
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d10b      	bne.n	8002be2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	4a15      	ldr	r2, [pc, #84]	; (8002c28 <UART_AdvFeatureConfig+0x160>)
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	0019      	movs	r1, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be6:	2280      	movs	r2, #128	; 0x80
 8002be8:	4013      	ands	r3, r2
 8002bea:	d00b      	beq.n	8002c04 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	4a0e      	ldr	r2, [pc, #56]	; (8002c2c <UART_AdvFeatureConfig+0x164>)
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	0019      	movs	r1, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	605a      	str	r2, [r3, #4]
  }
}
 8002c04:	46c0      	nop			; (mov r8, r8)
 8002c06:	46bd      	mov	sp, r7
 8002c08:	b002      	add	sp, #8
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	fffdffff 	.word	0xfffdffff
 8002c10:	fffeffff 	.word	0xfffeffff
 8002c14:	fffbffff 	.word	0xfffbffff
 8002c18:	ffff7fff 	.word	0xffff7fff
 8002c1c:	ffffefff 	.word	0xffffefff
 8002c20:	ffffdfff 	.word	0xffffdfff
 8002c24:	ffefffff 	.word	0xffefffff
 8002c28:	ff9fffff 	.word	0xff9fffff
 8002c2c:	fff7ffff 	.word	0xfff7ffff

08002c30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af02      	add	r7, sp, #8
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002c3e:	f7fe f8bd 	bl	8000dbc <HAL_GetTick>
 8002c42:	0003      	movs	r3, r0
 8002c44:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2208      	movs	r2, #8
 8002c4e:	4013      	ands	r3, r2
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	d10d      	bne.n	8002c70 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	2380      	movs	r3, #128	; 0x80
 8002c58:	0399      	lsls	r1, r3, #14
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	4b16      	ldr	r3, [pc, #88]	; (8002cb8 <UART_CheckIdleState+0x88>)
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	0013      	movs	r3, r2
 8002c62:	2200      	movs	r2, #0
 8002c64:	f000 f82a 	bl	8002cbc <UART_WaitOnFlagUntilTimeout>
 8002c68:	1e03      	subs	r3, r0, #0
 8002c6a:	d001      	beq.n	8002c70 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e01f      	b.n	8002cb0 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2204      	movs	r2, #4
 8002c78:	4013      	ands	r3, r2
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	d10d      	bne.n	8002c9a <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	2380      	movs	r3, #128	; 0x80
 8002c82:	03d9      	lsls	r1, r3, #15
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	4b0c      	ldr	r3, [pc, #48]	; (8002cb8 <UART_CheckIdleState+0x88>)
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	0013      	movs	r3, r2
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f000 f815 	bl	8002cbc <UART_WaitOnFlagUntilTimeout>
 8002c92:	1e03      	subs	r3, r0, #0
 8002c94:	d001      	beq.n	8002c9a <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e00a      	b.n	8002cb0 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2270      	movs	r2, #112	; 0x70
 8002caa:	2100      	movs	r1, #0
 8002cac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	b004      	add	sp, #16
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	01ffffff 	.word	0x01ffffff

08002cbc <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	603b      	str	r3, [r7, #0]
 8002cc8:	1dfb      	adds	r3, r7, #7
 8002cca:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ccc:	e029      	b.n	8002d22 <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	d026      	beq.n	8002d22 <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cd4:	f7fe f872 	bl	8000dbc <HAL_GetTick>
 8002cd8:	0002      	movs	r2, r0
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d302      	bcc.n	8002cea <UART_WaitOnFlagUntilTimeout+0x2e>
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d11b      	bne.n	8002d22 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4915      	ldr	r1, [pc, #84]	; (8002d4c <UART_WaitOnFlagUntilTimeout+0x90>)
 8002cf6:	400a      	ands	r2, r1
 8002cf8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2101      	movs	r1, #1
 8002d06:	438a      	bics	r2, r1
 8002d08:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2220      	movs	r2, #32
 8002d0e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2220      	movs	r2, #32
 8002d14:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2270      	movs	r2, #112	; 0x70
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e00f      	b.n	8002d42 <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	69db      	ldr	r3, [r3, #28]
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	68ba      	ldr	r2, [r7, #8]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	425a      	negs	r2, r3
 8002d32:	4153      	adcs	r3, r2
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	001a      	movs	r2, r3
 8002d38:	1dfb      	adds	r3, r7, #7
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d0c6      	beq.n	8002cce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	0018      	movs	r0, r3
 8002d44:	46bd      	mov	sp, r7
 8002d46:	b004      	add	sp, #16
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	fffffe5f 	.word	0xfffffe5f

08002d50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	490a      	ldr	r1, [pc, #40]	; (8002d8c <UART_EndRxTransfer+0x3c>)
 8002d64:	400a      	ands	r2, r1
 8002d66:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689a      	ldr	r2, [r3, #8]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2101      	movs	r1, #1
 8002d74:	438a      	bics	r2, r1
 8002d76:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	661a      	str	r2, [r3, #96]	; 0x60
}
 8002d84:	46c0      	nop			; (mov r8, r8)
 8002d86:	46bd      	mov	sp, r7
 8002d88:	b002      	add	sp, #8
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	fffffedf 	.word	0xfffffedf

08002d90 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	225a      	movs	r2, #90	; 0x5a
 8002da2:	2100      	movs	r1, #0
 8002da4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2252      	movs	r2, #82	; 0x52
 8002daa:	2100      	movs	r1, #0
 8002dac:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	0018      	movs	r0, r3
 8002db2:	f7ff fba7 	bl	8002504 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002db6:	46c0      	nop			; (mov r8, r8)
 8002db8:	46bd      	mov	sp, r7
 8002dba:	b004      	add	sp, #16
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b082      	sub	sp, #8
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2140      	movs	r1, #64	; 0x40
 8002dd2:	438a      	bics	r2, r1
 8002dd4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2220      	movs	r2, #32
 8002dda:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	0018      	movs	r0, r3
 8002de6:	f7ff fb85 	bl	80024f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002dea:	46c0      	nop			; (mov r8, r8)
 8002dec:	46bd      	mov	sp, r7
 8002dee:	b002      	add	sp, #8
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b082      	sub	sp, #8
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	b002      	add	sp, #8
 8002e00:	bd80      	pop	{r7, pc}
	...

08002e04 <__libc_init_array>:
 8002e04:	b570      	push	{r4, r5, r6, lr}
 8002e06:	2600      	movs	r6, #0
 8002e08:	4d0c      	ldr	r5, [pc, #48]	; (8002e3c <__libc_init_array+0x38>)
 8002e0a:	4c0d      	ldr	r4, [pc, #52]	; (8002e40 <__libc_init_array+0x3c>)
 8002e0c:	1b64      	subs	r4, r4, r5
 8002e0e:	10a4      	asrs	r4, r4, #2
 8002e10:	42a6      	cmp	r6, r4
 8002e12:	d109      	bne.n	8002e28 <__libc_init_array+0x24>
 8002e14:	2600      	movs	r6, #0
 8002e16:	f000 f821 	bl	8002e5c <_init>
 8002e1a:	4d0a      	ldr	r5, [pc, #40]	; (8002e44 <__libc_init_array+0x40>)
 8002e1c:	4c0a      	ldr	r4, [pc, #40]	; (8002e48 <__libc_init_array+0x44>)
 8002e1e:	1b64      	subs	r4, r4, r5
 8002e20:	10a4      	asrs	r4, r4, #2
 8002e22:	42a6      	cmp	r6, r4
 8002e24:	d105      	bne.n	8002e32 <__libc_init_array+0x2e>
 8002e26:	bd70      	pop	{r4, r5, r6, pc}
 8002e28:	00b3      	lsls	r3, r6, #2
 8002e2a:	58eb      	ldr	r3, [r5, r3]
 8002e2c:	4798      	blx	r3
 8002e2e:	3601      	adds	r6, #1
 8002e30:	e7ee      	b.n	8002e10 <__libc_init_array+0xc>
 8002e32:	00b3      	lsls	r3, r6, #2
 8002e34:	58eb      	ldr	r3, [r5, r3]
 8002e36:	4798      	blx	r3
 8002e38:	3601      	adds	r6, #1
 8002e3a:	e7f2      	b.n	8002e22 <__libc_init_array+0x1e>
 8002e3c:	08002ee8 	.word	0x08002ee8
 8002e40:	08002ee8 	.word	0x08002ee8
 8002e44:	08002ee8 	.word	0x08002ee8
 8002e48:	08002eec 	.word	0x08002eec

08002e4c <memset>:
 8002e4c:	0003      	movs	r3, r0
 8002e4e:	1812      	adds	r2, r2, r0
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d100      	bne.n	8002e56 <memset+0xa>
 8002e54:	4770      	bx	lr
 8002e56:	7019      	strb	r1, [r3, #0]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	e7f9      	b.n	8002e50 <memset+0x4>

08002e5c <_init>:
 8002e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e62:	bc08      	pop	{r3}
 8002e64:	469e      	mov	lr, r3
 8002e66:	4770      	bx	lr

08002e68 <_fini>:
 8002e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e6a:	46c0      	nop			; (mov r8, r8)
 8002e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e6e:	bc08      	pop	{r3}
 8002e70:	469e      	mov	lr, r3
 8002e72:	4770      	bx	lr
